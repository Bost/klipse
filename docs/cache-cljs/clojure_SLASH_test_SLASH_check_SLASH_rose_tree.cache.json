["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$filter","~$remove","~$seq"]],"~:name","~$clojure.test.check.rose-tree","~:imports",null,"~:requires",["^ ","~$core","~$cljs.core","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","^9",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^;","~:line",149,"~:column",7,"~:end-line",149,"~:end-column",10,"~:arglists",["~#list",["~$quote",["^K",[["~$rose"]]]]],"~:doc","Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."],"^:","~$clojure.test.check.rose-tree/seq","~:variadic",false,"^E","clojure/test/check/rose_tree.cljc","^I",10,"~:method-params",["^K",[["^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"^F",149,"^H",149,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."],"~$pure",["^ ","~:no-doc",true,"^C",null,"^D",["^ ","^E","^;","^F",68,"^G",7,"^H",68,"^I",11,"^J",["^K",["^L",["^K",[["~$x"]]]]],"^N","Puts a value `x` into a Rose tree, with no children.","^W",true],"^:","~$clojure.test.check.rose-tree/pure","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",11,"^Q",["^K",[["~$x"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",68,"^H",68,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$x"]]]]],"^N","Puts a value `x` into a Rose tree, with no children."],"~$->RoseTree",["^ ","^C",null,"^D",["^ ","~:protocols",["^6",["~$cljs.core/IIndexed"]],"^E","^;","^I",18,"^G",10,"~:factory","~:positional","^F",15,"^H",15,"^J",["^K",["^L",["^K",[["~$root","~$children"]]]]],"~:skip-protocol-flag",["^6",["^["]]],"^Z",["^6",["^["]],"^:","~$clojure.test.check.rose-tree/->RoseTree","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",18,"^Q",["^K",[["^12","^13"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^10","^11","^F",15,"^H",15,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^12","^13"]]]]],"^14",["^6",["^["]]],"~$make-stack",["^ ","^C",null,"^D",["^ ","^E","^;","^F",143,"^G",8,"^H",143,"^I",18,"~:private",true,"^J",["^K",["^L",["^K",[["^13","~$stack"]]]]]],"^17",true,"^:","~$clojure.test.check.rose-tree/make-stack","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",18,"^Q",["^K",[["^13","^18"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",143,"^H",143,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^13","^18"]]]]]],"~$join",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",55,"^G",7,"^H",55,"^I",11,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees.","^W",true],"^:","~$clojure.test.check.rose-tree/join","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",11,"^Q",["^K",[["^M"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",55,"^H",55,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees."],"~$bind",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",80,"^G",7,"^H",80,"^I",11,"^J",["^K",["^L",["^K",[["~$m","~$k"]]]]],"^N","Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees.","^W",true],"^:","~$clojure.test.check.rose-tree/bind","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",11,"^Q",["^K",[["~$m","~$k"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",80,"^H",80,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["~$m","~$k"]]]]],"^N","Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees."],"^13",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",35,"^G",7,"^H",35,"^I",15,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Returns the children of the root of the Rose tree.","^W",true],"^:","~$clojure.test.check.rose-tree/children","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",15,"^Q",["^K",[["^M"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",35,"^H",35,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Returns the children of the root of the Rose tree."],"~$exclude-nth",["^ ","^C",null,"^D",["^ ","^E","^;","^F",45,"^G",8,"^H",45,"^I",19,"^17",true,"^J",["^K",["^L",["^K",[["~$n","~$coll"]]]]],"^N","Exclude the nth value in a collection."],"^17",true,"^:","~$clojure.test.check.rose-tree/exclude-nth","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",19,"^Q",["^K",[["~$n","^1@"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",45,"^H",45,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["~$n","^1@"]]]]],"^N","Exclude the nth value in a collection."],"^8",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",116,"^G",7,"^H",116,"^I",13,"^J",["^K",["^L",["^K",[["~$roses"]]]]],"^W",true],"^:","~$clojure.test.check.rose-tree/remove","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",13,"^Q",["^K",[["^1B"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",116,"^H",116,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1B"]]]]]],"~$permutations",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",98,"^G",7,"^H",98,"^I",19,"^J",["^K",["^L",["^K",[["^1B"]]]]],"^N","Create a seq of vectors, where each rose in turn, has been replaced\n  by its children.","^W",true],"^:","~$clojure.test.check.rose-tree/permutations","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",19,"^Q",["^K",[["^1B"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",98,"^H",98,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1B"]]]]],"^N","Create a seq of vectors, where each rose in turn, has been replaced\n  by its children."],"~$RoseTree",["^ ","~:num-fields",2,"^Z",["^6",["^["]],"^:","~$clojure.test.check.rose-tree/RoseTree","^E","clojure/test/check/rose_tree.cljc","^I",18,"~:type",true,"^G",10,"^F",15,"~:record",false,"^H",15,"^14",["^6",["^["]]],"~$shrink",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",123,"^G",7,"^H",123,"^I",13,"^J",["^K",["^L",["^K",[["~$f","^1B"]]]]],"^W",true],"^:","~$clojure.test.check.rose-tree/shrink","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",13,"^Q",["^K",[["~$f","^1B"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",123,"^H",123,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["~$f","^1B"]]]]]],"~$make-rose",["^ ","^C",null,"^D",["^ ","^E","^;","^F",41,"^G",7,"^H",41,"^I",16,"^J",["^K",["^L",["^K",[["^12","^13"]]]]]],"^:","~$clojure.test.check.rose-tree/make-rose","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",16,"^Q",["^K",[["^12","^13"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",41,"^H",41,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^12","^13"]]]]]],"^7",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",88,"^G",7,"^H",88,"^I",13,"^J",["^K",["^L",["^K",[["~$pred","^M"]]]]],"^N","Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose","^W",true],"^:","~$clojure.test.check.rose-tree/filter","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",13,"^Q",["^K",[["^1O","^M"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",88,"^H",88,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^1O","^M"]]]]],"^N","Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose"],"^12",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",29,"^G",7,"^H",29,"^I",11,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Returns the root of a Rose tree.","^W",true],"^:","~$clojure.test.check.rose-tree/root","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",11,"^Q",["^K",[["^M"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",29,"^H",29,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Returns the root of a Rose tree."],"~$zip",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",107,"^G",7,"^H",107,"^I",10,"^J",["^K",["^L",["^K",[["~$f","^1B"]]]]],"^N","Apply `f` to the sequence of Rose trees `roses`.","^W",true],"^:","~$clojure.test.check.rose-tree/zip","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",10,"^Q",["^K",[["~$f","^1B"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",107,"^H",107,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["~$f","^1B"]]]]],"^N","Apply `f` to the sequence of Rose trees `roses`."],"~$fmap",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",74,"^G",7,"^H",74,"^I",11,"^J",["^K",["^L",["^K",[["~$f","^M"]]]]],"^N","Applies functions `f` to all values in the tree.","^W",true],"^:","~$clojure.test.check.rose-tree/fmap","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",11,"^Q",["^K",[["~$f","^M"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",74,"^H",74,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["~$f","^M"]]]]],"^N","Applies functions `f` to all values in the tree."],"~$collapse",["^ ","^W",true,"^C",null,"^D",["^ ","^E","^;","^F",131,"^G",7,"^H",131,"^I",15,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree.","^W",true],"^:","~$clojure.test.check.rose-tree/collapse","^P",false,"^E","clojure/test/check/rose_tree.cljc","^I",15,"^Q",["^K",[["^M"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",131,"^H",131,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^9","~$x","^V","^1=","^W","^Y","^[","^16","^M","^1:","^1C","^1N","^17","~:else","^1Q","^1<","^1B","^19","^15","^;","^Z","~:ns","^13","^:","^1?","^8","^1;","^E","^1D","^I","^O","^1O","^1A","^1>","^1E","^G","^1F","~$n","~$m","^11","^10","^1K","^1@","^F","~$k","^1L","^H","^1U","^1M","~:tag","^7","^12","^J","^14","^1W","^1R","^N","^1T","^18","^1P","^X","~:test","^1V","~$f","^1S"]],"~:order",["^20","^12","^13","^15","^Z","^21","^:","^E","^I","^G","^10","^F","^H","^J","^14","^N","^23","^[","^;","^Y","^11","^1Q","^W","^M","^22","^1F","^1>","^1N","^1M","^1A","^17","^1?","~$n","^1@","^1;","^1:","^X","^V","~$x","^1U","^1T","~$f","^1=","^1<","~$m","~$k","^1P","^7","^1O","^1E","^1D","^1B","^1S","^1R","^1C","^8","^1L","^1K","^1W","^1V","^19","^16","^18","^O","^9"]],"^N","A lazy tree data structure used for shrinking."]