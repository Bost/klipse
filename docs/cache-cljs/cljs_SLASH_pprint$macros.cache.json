["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$deftype","~$macroexpand"]],"~:name","~$cljs.pprint$macros","~:imports",null,"~:requires",["^ ","~$walk","~$clojure.walk","^<","^<","~$ana","~$cljs.analyzer","^>","^>"],"~:uses",null,"~:defs",["^ ","^6",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","~$cljs.pprint","~:line",83,"~:column",10,"~:end-line",83,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^J",[["~$env","~$form"]]]]]],"^7","~$cljs.pprint$macros/macroexpand","~:variadic",false,"^C","cljs/pprint.cljc","^H",21,"~:method-params",["^J",[["^L","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^F",4,"^E",83,"^G",83,"~:max-fixed-arity",2,"~:fn-var",true,"^I",["^J",["^K",["^J",[["^L","^M"]]]]]],"~$parse-lb-options",["^ ","^A",null,"^B",["^ ","^C","^D","^E",51,"^F",8,"^G",51,"^H",24,"~:private",true,"^I",["^J",["^K",["^J",[["~$opts","~$body"]]]]]],"^V",true,"^7","~$cljs.pprint$macros/parse-lb-options","^O",false,"^C","cljs/pprint.cljc","^H",24,"^P",["^J",[["^W","^X"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",51,"^G",51,"^S",2,"^T",true,"^I",["^J",["^K",["^J",[["^W","^X"]]]]]],"^5",["^ ","^A",null,"^B",["^ ","^C","^D","^E",40,"^F",11,"^G",40,"^H",18,"~:macro",true,"^I",["^J",["^K",["^J",[["~$type-name","~$&","~$fields"]]]]],"~:top-fn",["^ ","^O",true,"^S",3,"^P",[["^J",["~$&form","~$&env","^[","^10"]]],"^I",["^J",[["^12","^13","^[","~$&","^10"]]],"^R",["^J",[null]]]],"^7","~$cljs.pprint$macros/deftype","^O",true,"^C","cljs/pprint.cljc","^H",18,"^11",["^ ","^O",true,"^S",3,"^P",[["^J",["^12","^13","^[","^10"]]],"^I",["^J",[["^12","^13","^[","~$&","^10"]]],"^R",["^J",[null]]],"^P",[["^J",["^12","^13","^[","^10"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",40,"^Z",true,"^G",40,"^S",3,"^T",false,"^I",["^J",[["^12","^13","^[","~$&","^10"]]]],"~$print-length-loop",["^ ","^A",null,"^B",["^ ","^C","^D","^H",28,"^11",["^ ","^O",true,"^S",3,"^P",[["^J",["^12","^13","~$bindings","^X"]]],"^I",["^J",[["^12","^13","^16","~$&","^X"]]],"^R",["^J",[null]]],"^F",11,"^E",102,"^Z",true,"^G",102,"^I",["^J",["^K",["^J",[["^16","~$&","^X"]]]]],"~:doc","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"^7","~$cljs.pprint$macros/print-length-loop","^O",true,"^C","cljs/pprint.cljc","^H",28,"^11",["^ ","^O",true,"^S",3,"^P",[["^J",["^12","^13","^16","^X"]]],"^I",["^J",[["^12","^13","^16","~$&","^X"]]],"^R",["^J",[null]]],"^P",[["^J",["^12","^13","^16","^X"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",102,"^Z",true,"^G",102,"^S",3,"^T",false,"^I",["^J",[["^12","^13","^16","~$&","^X"]]],"^17","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"~$defdirectives",["^ ","^A",null,"^B",["^ ","^V",true,"^C","^D","^H",16,"^11",["^ ","^O",true,"^S",2,"^P",[["^J",["^12","^13","~$directives"]]],"^I",["^J",[["^12","^13","~$&","^1:"]]],"^R",["^J",[null]]],"^F",3,"^E",122,"^Z",true,"^G",122,"^I",["^J",["^K",["^J",[["~$&","^1:"]]]]]],"^V",true,"^7","~$cljs.pprint$macros/defdirectives","^O",true,"^C","cljs/pprint.cljc","^H",16,"^11",["^ ","^O",true,"^S",2,"^P",[["^J",["^12","^13","^1:"]]],"^I",["^J",[["^12","^13","~$&","^1:"]]],"^R",["^J",[null]]],"^P",[["^J",["^12","^13","^1:"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",121,"^Z",true,"^G",122,"^S",2,"^T",false,"^I",["^J",[["^12","^13","~$&","^1:"]]]],"~$pll-mod-body",["^ ","^A",null,"^B",["^ ","^C","^D","^E",90,"^F",8,"^G",90,"^H",20,"^V",true,"^I",["^J",["^K",["^J",[["^L","~$var-sym","^X"]]]]]],"^V",true,"^7","~$cljs.pprint$macros/pll-mod-body","^O",false,"^C","cljs/pprint.cljc","^H",20,"^P",["^J",[["^L","^1=","^X"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",90,"^G",90,"^S",3,"^T",true,"^I",["^J",["^K",["^J",[["^L","^1=","^X"]]]]]],"~$getf",["^ ","^A",null,"^B",["^ ","^C","^D","^E",28,"^F",11,"^G",28,"^H",15,"^Z",true,"^I",["^J",["^K",["^J",[["~$sym"]]]]],"^17","Get the value of the field a named by the argument (which should be a keyword)."],"^7","~$cljs.pprint$macros/getf","^O",false,"^C","cljs/pprint.cljc","^H",15,"^P",["^J",[["^12","^13","^1@"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",28,"^Z",true,"^G",28,"^S",3,"^T",false,"^I",["^J",["^K",["^J",[["^1@"]]]]],"^17","Get the value of the field a named by the argument (which should be a keyword)."],"~$pprint-logical-block",["^ ","^A",null,"^B",["^ ","^C","^D","^H",31,"^11",["^ ","^O",true,"^S",2,"^P",[["^J",["^12","^13","~$args"]]],"^I",["^J",[["^12","^13","~$&","^1C"]]],"^R",["^J",[null]]],"^F",11,"^E",58,"^Z",true,"^G",58,"^I",["^J",["^K",["^J",[["~$&","^1C"]]]]],"^17","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"^7","~$cljs.pprint$macros/pprint-logical-block","^O",true,"^C","cljs/pprint.cljc","^H",31,"^11",["^ ","^O",true,"^S",2,"^P",[["^J",["^12","^13","^1C"]]],"^I",["^J",[["^12","^13","~$&","^1C"]]],"^R",["^J",[null]]],"^P",[["^J",["^12","^13","^1C"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",58,"^Z",true,"^G",58,"^S",2,"^T",false,"^I",["^J",[["^12","^13","~$&","^1C"]]],"^17","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"~$pp",["^ ","^A",null,"^B",["^ ","~:added","1.2","^C","^D","^H",13,"^F",11,"^E",163,"^Z",true,"^G",163,"^I",["^J",["^K",["^J",[[]]]]],"^17","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"^1F","1.2","^7","~$cljs.pprint$macros/pp","^O",false,"^C","cljs/pprint.cljc","^H",13,"^P",["^J",[["^12","^13"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",163,"^Z",true,"^G",163,"^S",2,"^T",false,"^I",["^J",["^K",["^J",[[]]]]],"^17","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"~$process-directive-table-element",["^ ","^A",null,"^B",["^ ","^C","^D","^E",113,"^F",8,"^G",113,"^H",39,"^V",true,"^I",["^J",["^K",["^J",[[["~$char","~$params","~$flags","~$bracket-info","~$&","~$generator-fn"]]]]]]],"^V",true,"^7","~$cljs.pprint$macros/process-directive-table-element","^O",false,"^C","cljs/pprint.cljc","^H",39,"^P",["^J",[["~$p__1693"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",113,"^G",113,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[[["^1I","^1J","^1K","^1L","~$&","^1M"]]]]]]],"~$formatter-out",["^ ","^A",null,"^B",["^ ","^C","^D","^E",143,"^F",11,"^G",143,"^H",24,"^Z",true,"^I",["^J",["^K",["^J",[["~$format-in"]]]]],"^17","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"^7","~$cljs.pprint$macros/formatter-out","^O",false,"^C","cljs/pprint.cljc","^H",24,"^P",["^J",[["^12","^13","^1Q"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",143,"^Z",true,"^G",143,"^S",3,"^T",false,"^I",["^J",["^K",["^J",[["^1Q"]]]]],"^17","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"~$formatter",["^ ","^A",null,"^B",["^ ","^C","^D","^E",127,"^F",11,"^G",127,"^H",20,"^Z",true,"^I",["^J",["^K",["^J",[["^1Q"]]]]],"^17","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"^7","~$cljs.pprint$macros/formatter","^O",false,"^C","cljs/pprint.cljc","^H",20,"^P",["^J",[["^12","^13","^1Q"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",127,"^Z",true,"^G",127,"^S",3,"^T",false,"^I",["^J",["^K",["^J",[["^1Q"]]]]],"^17","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"~$with-pretty-writer",["^ ","^A",null,"^B",["^ ","^C","^D","^E",18,"^F",11,"^G",18,"^H",29,"^Z",true,"^I",["^J",["^K",["^J",[["~$base-writer","~$&","^X"]]]]],"^11",["^ ","^O",true,"^S",3,"^P",[["^J",["^12","^13","^1V","^X"]]],"^I",["^J",[["^12","^13","^1V","~$&","^X"]]],"^R",["^J",[null]]]],"^7","~$cljs.pprint$macros/with-pretty-writer","^O",true,"^C","cljs/pprint.cljc","^H",29,"^11",["^ ","^O",true,"^S",3,"^P",[["^J",["^12","^13","^1V","^X"]]],"^I",["^J",[["^12","^13","^1V","~$&","^X"]]],"^R",["^J",[null]]],"^P",[["^J",["^12","^13","^1V","^X"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",18,"^Z",true,"^G",18,"^S",3,"^T",false,"^I",["^J",[["^12","^13","^1V","~$&","^X"]]]],"~$setf",["^ ","^A",null,"^B",["^ ","^C","^D","^E",35,"^F",11,"^G",35,"^H",15,"^Z",true,"^I",["^J",["^K",["^J",[["^1@","~$new-val"]]]]],"^17","Set the value of the field SYM to NEW-VAL"],"^7","~$cljs.pprint$macros/setf","^O",false,"^C","cljs/pprint.cljc","^H",15,"^P",["^J",[["^12","^13","^1@","^1Y"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",35,"^Z",true,"^G",35,"^S",4,"^T",false,"^I",["^J",["^K",["^J",[["^1@","^1Y"]]]]],"^17","Set the value of the field SYM to NEW-VAL"],"~$with-pprint-dispatch",["^ ","^A",null,"^B",["^ ","^C","^D","^H",31,"^11",["^ ","^O",true,"^S",3,"^P",[["^J",["^12","^13","~$function","^X"]]],"^I",["^J",[["^12","^13","^20","~$&","^X"]]],"^R",["^J",[null]]],"^F",11,"^E",157,"^Z",true,"^G",157,"^I",["^J",["^K",["^J",[["^20","~$&","^X"]]]]],"^17","Execute body with the pretty print dispatch function bound to function."],"^7","~$cljs.pprint$macros/with-pprint-dispatch","^O",true,"^C","cljs/pprint.cljc","^H",31,"^11",["^ ","^O",true,"^S",3,"^P",[["^J",["^12","^13","^20","^X"]]],"^I",["^J",[["^12","^13","^20","~$&","^X"]]],"^R",["^J",[null]]],"^P",[["^J",["^12","^13","^20","^X"]]],"^Q",null,"^R",["^J",[null]],"^F",1,"^E",157,"^Z",true,"^G",157,"^S",3,"^T",false,"^I",["^J",[["^12","^13","^20","~$&","^X"]]],"^17","Execute body with the pretty print dispatch function bound to function."]],"~:require-macros",["^ "],"^17",null]