// Compiled by ClojureScript 1.9.376
goog.provide("clojure.test.check.random.longs.bit_count_impl");
(function (){
clojure.test.check.random.longs.bit_count_impl.lookup = (function (){var arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(arr[(0)] = (0));

var n__15825__auto___22 = (256);
var i_23 = (0);
while(true){
if((i_23 < n__15825__auto___22)){
(arr[i_23] = ((arr[(i_23 >> (1))]) + (i_23 & (1))));

var G__24 = (i_23 + (1));
i_23 = G__24;
continue;
} else {
}
break;
}

return arr;
})(); return (
new cljs.core.Var(function(){return clojure.test.check.random.longs.bit_count_impl.lookup;},new cljs.core.Symbol("clojure.test.check.random.longs.bit-count-impl","lookup","clojure.test.check.random.longs.bit-count-impl/lookup",(-396731403),null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"private","private",(-558947994)),new cljs.core.Keyword(null,"ns","ns",(441598760)),new cljs.core.Keyword(null,"name","name",(1843675177)),new cljs.core.Keyword(null,"file","file",(-1269645878)),new cljs.core.Keyword(null,"end-column","end-column",(1425389514)),new cljs.core.Keyword(null,"column","column",(2078222095)),new cljs.core.Keyword(null,"line","line",(212345235)),new cljs.core.Keyword(null,"end-line","end-line",(1837326455)),new cljs.core.Keyword(null,"arglists","arglists",(1661989754)),new cljs.core.Keyword(null,"doc","doc",(1913296891)),new cljs.core.Keyword(null,"test","test",(577538877))],[true,cljs.core.with_meta(new cljs.core.Symbol(null,"clojure.test.check.random.longs.bit-count-impl","clojure.test.check.random.longs.bit-count-impl",(-361420910),null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"author","author",(2111686192)),"Gary Fredericks"], null)),new cljs.core.Symbol(null,"lookup","lookup",(-1429078931),null),"clojure/test/check/random/longs/bit_count_impl.cljs",(22),(1),(18),(18),cljs.core.List.EMPTY,null,(cljs.core.truth_(clojure.test.check.random.longs.bit_count_impl.lookup)?clojure.test.check.random.longs.bit_count_impl.lookup.cljs$lang$test:null)])));})()
;
/**
 * Returns a JS number (not a Long), the number of set bits in the
 *   given Long.
 */
(function (){
clojure.test.check.random.longs.bit_count_impl.bit_count = (function clojure$test$check$random$longs$bit_count_impl$bit_count(x){
var low = x.low_;
var high = x.high_;
return ((((((((clojure.test.check.random.longs.bit_count_impl.lookup[(low & (255))]) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (24)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[(high & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (24)) & (255))]));
}); return (
new cljs.core.Var(function(){return clojure.test.check.random.longs.bit_count_impl.bit_count;},new cljs.core.Symbol("clojure.test.check.random.longs.bit-count-impl","bit-count","clojure.test.check.random.longs.bit-count-impl/bit-count",(361529293),null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",(441598760)),new cljs.core.Keyword(null,"name","name",(1843675177)),new cljs.core.Keyword(null,"file","file",(-1269645878)),new cljs.core.Keyword(null,"end-column","end-column",(1425389514)),new cljs.core.Keyword(null,"column","column",(2078222095)),new cljs.core.Keyword(null,"line","line",(212345235)),new cljs.core.Keyword(null,"end-line","end-line",(1837326455)),new cljs.core.Keyword(null,"arglists","arglists",(1661989754)),new cljs.core.Keyword(null,"doc","doc",(1913296891)),new cljs.core.Keyword(null,"test","test",(577538877))],[cljs.core.with_meta(new cljs.core.Symbol(null,"clojure.test.check.random.longs.bit-count-impl","clojure.test.check.random.longs.bit-count-impl",(-361420910),null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"author","author",(2111686192)),"Gary Fredericks"], null)),new cljs.core.Symbol(null,"bit-count","bit-count",(1400227397),null),"clojure/test/check/random/longs/bit_count_impl.cljs",(16),(1),(26),(26),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",(-555367584),null)], null)),"Returns a JS number (not a Long), the number of set bits in the\n  given Long.",(cljs.core.truth_(clojure.test.check.random.longs.bit_count_impl.bit_count)?clojure.test.check.random.longs.bit_count_impl.bit_count.cljs$lang$test:null)])));})()
;

//# sourceURL=clojure/test/check/random/longs/bit_count_impl.js?rel=1483438380311
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvanVyZS90ZXN0L2NoZWNrL3JhbmRvbS9sb25ncy9iaXRfY291bnRfaW1wbC5qcz9yZWw9MTQ4MzQzODM4MDMxMSIsInNvdXJjZXMiOlsiYml0X2NvdW50X2ltcGwuY2xqcz9yZWw9MTQ4MzQzODM4MDMxMSJdLCJsaW5lQ291bnQiOjM4LCJtYXBwaW5ncyI6IjtBQWlCQTtBQUFlQSx3REFDYixpQkFBTUMsTUFBSSxDQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBO0FBQVYsQUFDRSxLQUFBLE9BQUEsWEFBTUE7O0FBQ04sSUFBQUMsc0JBQUE7QUFBQSxBQUFBLFdBQUEsUEFBVUM7O0FBQVYsQUFBQSxHQUFBLFFBQUFELFBBQVVDO0FBQVYsQUFDRSxDQUFNRixJQUFJRSxRQUFFLENBQUcsQ0FBTUYsSUFBSSxTQUFBLFJBQWlCRSxpQkFDM0IsUUFBQSxQQUFTQTs7QUFGMUIsWUFBQSxRQUFBLFBBQVVBOzs7O0FBQVY7Ozs7QUFHQUY7O0FBTkosNEZBQUEsMEpBQUEsd0NBQUEsNkRBQUEsa0RBQUEsdURBQUEsd0RBQUEsbUVBQUEsMkRBQUEsc0RBQUEsK0RBQUEsK0RBQUEscURBQUEsd0RBQUEsS0FBQSxvQkFBQSwrSUFBQSwyQ0FBQSwyREFBQSwyQkFBQSxnRUFBQSxzREFBQSxLQUFBLElBQUEsS0FBQSxLQUFBLHFCQUFBLEtBQUEseUVBQUEsQUFBQSxxRUFBQSw1SEFBZUQsdURBQUFBOztBQVFmOzs7OzsyREFBQSwzREFBTUksOEhBR0hDO0FBSEgsQUFJRSxJQUFNQyxNQUFJLEFBQVFEO0lBQ1pFLE9BQUssQUFBU0Y7QUFEcEIsQUFFRSxRQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFHLENBQU1MLHVEQUFXTSxEQUFLLE9BQUEsV0FDdEIsQ0FBTU4sd0RBQVdNLERBQUssUUFBQSxUQUFvQixnQkFBQSxZQUMxQyxDQUFNTix3REFBV00sREFBSyxRQUFBLFRBQXFCLGlCQUFBLFlBQzNDLENBQU1OLHdEQUFXTSxEQUFLLFFBQUEsVEFBcUIsaUJBQUEsWUFDM0MsQ0FBTU4sdURBQVdPLERBQUssUUFBQSxZQUN0QixDQUFNUCx3REFBV08sREFBSyxTQUFBLFZBQW9CLGlCQUFBLFlBQzFDLENBQU1QLHdEQUFXTyxEQUFLLFNBQUEsVkFBcUIsa0JBQUEsWUFDM0MsQ0FBTVAsd0RBQVdPLERBQUssU0FBQSxWQUFxQixrQkFBQTs7QUFibEQsK0ZBQUEsK0pBQUEsd0NBQUEsa0RBQUEsdURBQUEsd0RBQUEsbUVBQUEsMkRBQUEsc0RBQUEsK0RBQUEsK0RBQUEscURBQUEsd0RBQUEsb0JBQUEsK0lBQUEsMkNBQUEsMkRBQUEsMkJBQUEscUVBQUEsc0RBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQSxlQUFBLG1GQUFBLDhEQUFBLGlGQUFBLDRFQUFBLEFBQUEsd0VBQUEsbElBQU1ILDBEQUFBQSIsIm5hbWVzIjpbImNsb2p1cmUudGVzdC5jaGVjay5yYW5kb20ubG9uZ3MuYml0LWNvdW50LWltcGwvbG9va3VwIiwiYXJyIiwibl9fMTU4MjVfX2F1dG9fXyIsImkiLCJjbG9qdXJlLnRlc3QuY2hlY2sucmFuZG9tLmxvbmdzLmJpdC1jb3VudC1pbXBsL2JpdC1jb3VudCIsIngiLCJsb3ciLCJoaWdoIl0sInNvdXJjZXNDb250ZW50IjpbIjsgICBDb3B5cmlnaHQgKGMpIFJpY2ggSGlja2V5LCBSZWlkIERyYXBlciwgYW5kIGNvbnRyaWJ1dG9ycy5cbjsgICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuOyAgIFRoZSB1c2UgYW5kIGRpc3RyaWJ1dGlvbiB0ZXJtcyBmb3IgdGhpcyBzb2Z0d2FyZSBhcmUgY292ZXJlZCBieSB0aGVcbjsgICBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIDEuMCAoaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2VjbGlwc2UtMS4wLnBocClcbjsgICB3aGljaCBjYW4gYmUgZm91bmQgaW4gdGhlIGZpbGUgZXBsLXYxMC5odG1sIGF0IHRoZSByb290IG9mIHRoaXMgZGlzdHJpYnV0aW9uLlxuOyAgIEJ5IHVzaW5nIHRoaXMgc29mdHdhcmUgaW4gYW55IGZhc2hpb24sIHlvdSBhcmUgYWdyZWVpbmcgdG8gYmUgYm91bmQgYnlcbjsgICB0aGUgdGVybXMgb2YgdGhpcyBsaWNlbnNlLlxuOyAgIFlvdSBtdXN0IG5vdCByZW1vdmUgdGhpcyBub3RpY2UsIG9yIGFueSBvdGhlciwgZnJvbSB0aGlzIHNvZnR3YXJlLlxuXG4obnMgXns6YXV0aG9yIFwiR2FyeSBGcmVkZXJpY2tzXCJ9XG4gIGNsb2p1cmUudGVzdC5jaGVjay5yYW5kb20ubG9uZ3MuYml0LWNvdW50LWltcGxcbiAgKDpyZWZlci1jbG9qdXJlIDpleGNsdWRlIFtiaXQtY291bnRdKSlcblxuOzsgSGFkIHRvIHB1dCB0aGlzIGluIGEgc2VwYXJhdGUgbmFtZXNwYWNlIGJlY2F1c2UgdGhlICsgZG9lc24ndCBnZXRcbjs7IGlubGluZWQgaWYgaXQncyBjYWxsZWQgYXMgKGNvcmUvKyAuLi4pLiBUaGlzIG1pZ2h0IGNoYW5nZSBpbiBmdXR1cmVcbjs7IENMSlMgdmVyc2lvbnM/XG5cbihkZWYgXjpwcml2YXRlIGxvb2t1cFxuICAobGV0IFthcnIgKG1ha2UtYXJyYXkgMjU2KV1cbiAgICAoYXNldCBhcnIgMCAwKVxuICAgIChkb3RpbWVzIFtpIDI1Nl1cbiAgICAgIChhc2V0IGFyciBpICgrIChhZ2V0IGFyciAoYml0LXNoaWZ0LXJpZ2h0IGkgMSkpXG4gICAgICAgICAgICAgICAgICAgICAoYml0LWFuZCBpIDEpKSkpXG4gICAgYXJyKSlcblxuKGRlZm4gYml0LWNvdW50XG4gIFwiUmV0dXJucyBhIEpTIG51bWJlciAobm90IGEgTG9uZyksIHRoZSBudW1iZXIgb2Ygc2V0IGJpdHMgaW4gdGhlXG4gIGdpdmVuIExvbmcuXCJcbiAgW3hdXG4gIChsZXQgW2xvdyAoLi1sb3dfIHgpXG4gICAgICAgIGhpZ2ggKC4taGlnaF8geCldXG4gICAgKCsgKGFnZXQgbG9va3VwICgtPiBsb3cgIChiaXQtYW5kIDI1NSkpKVxuICAgICAgIChhZ2V0IGxvb2t1cCAoLT4gbG93ICAoYml0LXNoaWZ0LXJpZ2h0IDgpIChiaXQtYW5kIDI1NSkpKVxuICAgICAgIChhZ2V0IGxvb2t1cCAoLT4gbG93ICAoYml0LXNoaWZ0LXJpZ2h0IDE2KSAoYml0LWFuZCAyNTUpKSlcbiAgICAgICAoYWdldCBsb29rdXAgKC0+IGxvdyAgKGJpdC1zaGlmdC1yaWdodCAyNCkgKGJpdC1hbmQgMjU1KSkpXG4gICAgICAgKGFnZXQgbG9va3VwICgtPiBoaWdoIChiaXQtYW5kIDI1NSkpKVxuICAgICAgIChhZ2V0IGxvb2t1cCAoLT4gaGlnaCAoYml0LXNoaWZ0LXJpZ2h0IDgpIChiaXQtYW5kIDI1NSkpKVxuICAgICAgIChhZ2V0IGxvb2t1cCAoLT4gaGlnaCAoYml0LXNoaWZ0LXJpZ2h0IDE2KSAoYml0LWFuZCAyNTUpKSlcbiAgICAgICAoYWdldCBsb29rdXAgKC0+IGhpZ2ggKGJpdC1zaGlmdC1yaWdodCAyNCkgKGJpdC1hbmQgMjU1KSkpKSkpXG4iXX0=