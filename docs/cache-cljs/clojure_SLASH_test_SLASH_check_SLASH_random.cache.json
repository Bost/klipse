["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Date",["^ ","~$prototype",["^ ","~$valueOf",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$+","~$*","~$bit-xor","~$bit-or","~$bit-count","~$unsigned-bit-shift-right"]],"~:name","~$clojure.test.check.random","~:imports",null,"~:requires",["^ ","~$doubles","~$clojure.test.check.random.doubles","^C","^C","~$longs","~$clojure.test.check.random.longs","^E","^E"],"~:uses",["^ ","^<","^E","^:","^E","^=","^E","~$*","^E","^;","^E","~$+","^E"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^>","~$clojure.test.check.random/mix-gamma-const-1","~:file","clojure/test/check/random.cljs","~:line",71,"~:column",1,"~:end-line",71,"~:end-column",33,"~:private",true,"~:meta",["^ ","^J","^?","^K",71,"^L",16,"^M",71,"^N",33,"^O",true]],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^P",["^ ","^J","^?","^K",123,"^L",7,"^M",123,"^N",39,"~:arglists",["~#list",["~$quote",["^T",[["~$seed"]]]]]],"^>","~$clojure.test.check.random/make-java-util-splittable-random","~:variadic",false,"^J","clojure/test/check/random.cljs","^N",39,"~:method-params",["^T",[["^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^L",1,"^K",123,"^M",123,"~:max-fixed-arity",1,"~:fn-var",true,"^S",["^T",["^U",["^T",[["^V"]]]]]],"~$rand-long",["^ ","^R",null,"^P",["^ ","^J","^?","^K",20,"^L",4,"^M",20,"^N",13,"~:protocol","~$clojure.test.check.random/IRandom","~:doc","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^S",["^T",["^U",["^T",[["~$rng"]]]]]],"^13","^14","^>","~$clojure.test.check.random/rand-long","^X",false,"^J","clojure/test/check/random.cljs","^N",13,"^Y",["^T",[["^16"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",19,"^M",20,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^16"]]]]],"^15","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^R",null,"^P",["^ ","^J","^?","^K",62,"^L",17,"^M",62,"^N",23,"^O",true,"^S",["^T",["^U",["^T",[["~$n"]]]]]],"^O",true,"^>","~$clojure.test.check.random/mix-64","^X",false,"^J","clojure/test/check/random.cljs","^N",23,"^Y",["^T",[["~$n"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",62,"^M",62,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$n"]]]]]],"~$golden-gamma",["^ ","^>","~$clojure.test.check.random/golden-gamma","^J","clojure/test/check/random.cljs","^K",120,"^L",1,"^M",120,"^N",28,"^O",true,"^P",["^ ","^J","^?","^K",120,"^L",16,"^M",120,"^N",28,"^O",true]],"~$mix-gamma-const-2",["^ ","^>","~$clojure.test.check.random/mix-gamma-const-2","^J","clojure/test/check/random.cljs","^K",72,"^L",1,"^M",72,"^N",33,"^O",true,"^P",["^ ","^J","^?","^K",72,"^L",16,"^M",72,"^N",33,"^O",true]],"~$mix-64-const-2",["^ ","^>","~$clojure.test.check.random/mix-64-const-2","^J","clojure/test/check/random.cljs","^K",60,"^L",1,"^M",60,"^N",30,"^O",true,"^P",["^ ","^J","^?","^K",60,"^L",16,"^M",60,"^N",30,"^O",true]],"~$bxoubsr",["^ ","^R",null,"^P",["^ ","^J","^?","^K",54,"^L",17,"^M",54,"^N",24,"^O",true,"^S",["^T",["^U",["^T",[["~$x","~$n"]]]]],"^15","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^O",true,"^>","~$clojure.test.check.random/bxoubsr","^X",false,"^J","clojure/test/check/random.cljs","^N",24,"^Y",["^T",[["~$x","~$n"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",54,"^M",54,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["~$x","~$n"]]]]],"^15","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^R",null,"^P",["^ ","^J","^?","^K",140,"^L",7,"^M",140,"^N",18,"^S",["^T",["^U",["^T",[[],["^V"]]]]],"^15","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^X",false,"^10",1,"^Y",["^T",[[],["^V"]]],"^S",["^T",[[],["^V"]]],"^[",["^T",[null,null]]]],"^>","~$clojure.test.check.random/make-random","^X",false,"^J","clojure/test/check/random.cljs","^N",18,"^1C",["^ ","^X",false,"^10",1,"^Y",["^T",[[],["^V"]]],"^S",["^T",[[],["^V"]]],"^[",["^T",[null,null]]],"^Y",["^T",[[],["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",140,"^M",140,"^10",1,"^11",true,"^S",["^T",[[],["^V"]]],"^15","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^R",null,"^P",["^ ","^J","^?","^K",75,"^L",17,"^M",75,"^N",26,"^O",true,"^S",["^T",["^U",["^T",[["~$n"]]]]]],"^O",true,"^>","~$clojure.test.check.random/mix-gamma","^X",false,"^J","clojure/test/check/random.cljs","^N",26,"^Y",["^T",[["~$n"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",75,"^M",75,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^>","~$clojure.test.check.random/mix-gamma-const-3","^J","clojure/test/check/random.cljs","^K",73,"^L",1,"^M",73,"^N",33,"^O",true,"^P",["^ ","^J","^?","^K",73,"^L",16,"^M",73,"^N",33,"^O",true]],"~$split-n",["^ ","^R",null,"^P",["^ ","^J","^?","^K",37,"^L",4,"^M",37,"^N",11,"^13","^14","^15","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^S",["^T",["^U",["^T",[["^16","~$n"]]]]]],"^13","^14","^>","~$clojure.test.check.random/split-n","^X",false,"^J","clojure/test/check/random.cljs","^N",11,"^Y",["^T",[["^16","~$n"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",19,"^M",37,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^16","~$n"]]]]],"^15","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^>","~$clojure.test.check.random/next-rng","^J","clojure/test/check/random.cljs","^K",130,"^L",1,"^M",130,"^N",24,"^O",true,"^P",["^ ","^J","^?","^K",130,"^L",16,"^M",130,"^N",24,"^O",true]],"~$hex-long",["^ ","^R",null,"^P",["^ ","^J","^?","^K",49,"^L",17,"^M",49,"^N",25,"^O",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^15","Helper for defining constants."],"^O",true,"^>","~$clojure.test.check.random/hex-long","^X",false,"^J","clojure/test/check/random.cljs","^N",25,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",49,"^M",49,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^15","Helper for defining constants."],"~$rand-double",["^ ","^R",null,"^P",["^ ","^J","^?","^K",25,"^L",4,"^M",25,"^N",15,"^13","^14","^15","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^S",["^T",["^U",["^T",[["^16"]]]]]],"^13","^14","^>","~$clojure.test.check.random/rand-double","^X",false,"^J","clojure/test/check/random.cljs","^N",15,"^Y",["^T",[["^16"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",19,"^M",25,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^16"]]]]],"^15","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^>","~$clojure.test.check.random/mix-64-const-1","^J","clojure/test/check/random.cljs","^K",59,"^L",1,"^M",59,"^N",30,"^O",true,"^P",["^ ","^J","^?","^K",59,"^L",16,"^M",59,"^N",30,"^O",true]],"~$split",["^ ","^R",null,"^P",["^ ","^J","^?","^K",31,"^L",4,"^M",31,"^N",9,"^13","^14","^15","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^S",["^T",["^U",["^T",[["^16"]]]]]],"^13","^14","^>","~$clojure.test.check.random/split","^X",false,"^J","clojure/test/check/random.cljs","^N",9,"^Y",["^T",[["^16"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^K",19,"^M",31,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^16"]]]]],"^15","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^9",["^14"]],"^>","~$clojure.test.check.random/JavaUtilSplittableRandom","^J","clojure/test/check/random.cljs","^N",34,"~:type",true,"^L",10,"^K",91,"~:record",false,"^M",91,"~:skip-protocol-flag",null],"~$IRandom",["^ ","^P",["^ ","~:protocol-symbol",true,"^J","^?","^N",21,"^L",14,"^K",19,"~:protocol-info",["^ ","~:methods",["^ ","^12",[["^16"]],"^1O",[["^16"]],"^1S",[["^16"]],"^1I",[["^16","~$n"]]]],"^M",19,"^15",null,"~:jsdoc",["^T",["@interface"]]],"^21",true,"^>","^14","^J","clojure/test/check/random.cljs","^N",21,"^L",1,"^K",19,"^22",["^ ","^23",["^ ","^12",[["^16"]],"^1O",[["^16"]],"^1S",[["^16"]],"^1I",[["^16","~$n"]]]],"~:info",null,"^M",19,"~:impls",["^9",["^1X"]],"^15",null,"^24",["^T",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^R",null,"^P",["^ ","^1W",["^9",["^14"]],"^J","^?","^N",34,"^L",10,"~:factory","~:positional","^K",91,"^M",91,"^S",["^T",["^U",["^T",[["~$gamma","~$state"]]]]],"^1[",null],"^1W",["^9",["^14"]],"^>","~$clojure.test.check.random/->JavaUtilSplittableRandom","^X",false,"^J","clojure/test/check/random.cljs","^N",34,"^Y",["^T",[["^2:","^2;"]]],"^Z",null,"^[",["^T",[null,null]],"^L",1,"^28","^29","^K",91,"^M",91,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^2:","^2;"]]]]],"^1[",null]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~$x","^19","^W","^1D","^H","^1A","^1?","^Q","^12","^1T","^18","~:returned","^O","^14","^21","^13","^1:","^16","^1N","^1<","^1W","~:ns","^>","^X","^J","^N","^1C","^1>","~:state","^Y","^1@","^1B","^[","~:seed","^I","^17","^L","~:author","~$n","^1E","^?","^29","^1G","^28","^1P","^23","^1L","^1I","^K","^22","^1R","^2;","^1=","~$s","^1K","^V","^M","^1M","^1O","^10","^1Q","^1S","^1;","^S","^1[","^15","^2<","^24","^1F","^20","~:test","^1J","^2:","^27","^1H"]],"~:order",["^14","^21","^2A","^>","^J","^N","^L","^K","^22","^M","^S","^15","^24","^2E","^?","^2D","^20","^23","^12","^1O","^1S","^1I","^16","~$n","^17","^13","^1P","^1T","^1J","^1N","^O","^1M","~$s","^1A","^1@","~$x","^1R","^1Q","^1?","^1>","^19","^18","^I","^H","^1=","^1<","^1H","^1G","^1F","^1E","^2:","^2;","^2<","^1W","^28","^1[","^27","^29","^1;","^1:","^2C","^W","^Q","^V","^2B","^2@","^1L","^1K","^1D","^1C","^1B","^X","^10","^Y","^["]],"^15","Purely functional and splittable pseudo-random number generators."]