["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Date",["^ ","~$prototype",["^ ","~$valueOf",["^ "]]],"~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$+","~$*","~$bit-xor","~$bit-or","~$bit-count","~$unsigned-bit-shift-right"]],"~:name","~$clojure.test.check.random","~:imports",null,"~:requires",["^ ","~$doubles","~$clojure.test.check.random.doubles","^C","^C","~$longs","~$clojure.test.check.random.longs","^E","^E"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^<","^E","^:","^E","^=","^E","~$*","^E","^;","^E","~$+","^E"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","~:meta",["^ ","~:file","^?","~:line",71,"~:column",16,"~:end-line",71,"~:end-column",33,"~:private",true],"^P",true,"^>","~$clojure.test.check.random/mix-gamma-const-1","^K","clojure/test/check/random.cljs","^O",33,"^M",1,"^L",71,"^N",71,"~:tag","~$any"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^J",["^ ","^K","^?","^L",123,"^M",7,"^N",123,"^O",39,"~:arglists",["~#list",["~$quote",["^W",[["~$seed"]]]]]],"^>","~$clojure.test.check.random/make-java-util-splittable-random","~:variadic",false,"^K","clojure/test/check/random.cljs","^O",39,"~:method-params",["^W",[["^Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^M",1,"^L",123,"^N",123,"~:max-fixed-arity",1,"~:fn-var",true,"^V",["^W",["^X",["^W",[["^Y"]]]]]],"~$rand-long",["^ ","^U",null,"^J",["^ ","^K","^?","^L",20,"^M",4,"^N",20,"^O",13,"~:protocol","~$clojure.test.check.random/IRandom","~:doc","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["~$rng"]]]]]],"^16","^17","^>","~$clojure.test.check.random/rand-long","^[",false,"^K","clojure/test/check/random.cljs","^O",13,"^10",["^W",[["^19"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",20,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^18","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^U",null,"^J",["^ ","^K","^?","^L",62,"^M",17,"^N",62,"^O",23,"^P",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"^P",true,"^>","~$clojure.test.check.random/mix-64","^[",false,"^K","clojure/test/check/random.cljs","^O",23,"^10",["^W",[["~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",62,"^N",62,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"~$golden-gamma",["^ ","^J",["^ ","^K","^?","^L",120,"^M",16,"^N",120,"^O",28,"^P",true],"^P",true,"^>","~$clojure.test.check.random/golden-gamma","^K","clojure/test/check/random.cljs","^O",28,"^M",1,"^L",120,"^N",120,"^R","^S"],"~$mix-gamma-const-2",["^ ","^J",["^ ","^K","^?","^L",72,"^M",16,"^N",72,"^O",33,"^P",true],"^P",true,"^>","~$clojure.test.check.random/mix-gamma-const-2","^K","clojure/test/check/random.cljs","^O",33,"^M",1,"^L",72,"^N",72,"^R","^S"],"~$mix-64-const-2",["^ ","^J",["^ ","^K","^?","^L",60,"^M",16,"^N",60,"^O",30,"^P",true],"^P",true,"^>","~$clojure.test.check.random/mix-64-const-2","^K","clojure/test/check/random.cljs","^O",30,"^M",1,"^L",60,"^N",60,"^R","^S"],"~$bxoubsr",["^ ","^U",null,"^J",["^ ","^K","^?","^L",54,"^M",17,"^N",54,"^O",24,"^P",true,"^V",["^W",["^X",["^W",[["~$x","~$n"]]]]],"^18","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^P",true,"^>","~$clojure.test.check.random/bxoubsr","^[",false,"^K","clojure/test/check/random.cljs","^O",24,"^10",["^W",[["~$x","~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",54,"^N",54,"^13",2,"^14",true,"^V",["^W",["^X",["^W",[["~$x","~$n"]]]]],"^18","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^U",null,"^J",["^ ","^K","^?","^L",140,"^M",7,"^N",140,"^O",18,"^V",["^W",["^X",["^W",[[],["^Y"]]]]],"^18","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^[",false,"^13",1,"^10",["^W",[[],["^Y"]]],"^V",["^W",[[],["^Y"]]],"^12",["^W",[null,null]]]],"^>","~$clojure.test.check.random/make-random","^[",false,"^K","clojure/test/check/random.cljs","^O",18,"^1F",["^ ","^[",false,"^13",1,"^10",["^W",[[],["^Y"]]],"^V",["^W",[[],["^Y"]]],"^12",["^W",[null,null]]],"^10",["^W",[[],["^Y"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",140,"^N",140,"^13",1,"^14",true,"^V",["^W",[[],["^Y"]]],"^18","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^U",null,"^J",["^ ","^K","^?","^L",75,"^M",17,"^N",75,"^O",26,"^P",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"^P",true,"^>","~$clojure.test.check.random/mix-gamma","^[",false,"^K","clojure/test/check/random.cljs","^O",26,"^10",["^W",[["~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",75,"^N",75,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^J",["^ ","^K","^?","^L",73,"^M",16,"^N",73,"^O",33,"^P",true],"^P",true,"^>","~$clojure.test.check.random/mix-gamma-const-3","^K","clojure/test/check/random.cljs","^O",33,"^M",1,"^L",73,"^N",73,"^R","^S"],"~$split-n",["^ ","^U",null,"^J",["^ ","^K","^?","^L",37,"^M",4,"^N",37,"^O",11,"^16","^17","^18","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["^19","~$n"]]]]]],"^16","^17","^>","~$clojure.test.check.random/split-n","^[",false,"^K","clojure/test/check/random.cljs","^O",11,"^10",["^W",[["^19","~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",37,"^13",2,"^14",true,"^V",["^W",["^X",["^W",[["^19","~$n"]]]]],"^18","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^J",["^ ","^K","^?","^L",130,"^M",16,"^N",130,"^O",24,"^P",true],"^P",true,"^>","~$clojure.test.check.random/next-rng","^K","clojure/test/check/random.cljs","^O",24,"^M",1,"^L",130,"^N",130,"^R","~$function"],"~$hex-long",["^ ","^U",null,"^J",["^ ","^K","^?","^L",49,"^M",17,"^N",49,"^O",25,"^P",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^18","Helper for defining constants."],"^P",true,"^>","~$clojure.test.check.random/hex-long","^[",false,"^K","clojure/test/check/random.cljs","^O",25,"^10",["^W",[["~$s"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",49,"^N",49,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^18","Helper for defining constants."],"~$rand-double",["^ ","^U",null,"^J",["^ ","^K","^?","^L",25,"^M",4,"^N",25,"^O",15,"^16","^17","^18","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["^19"]]]]]],"^16","^17","^>","~$clojure.test.check.random/rand-double","^[",false,"^K","clojure/test/check/random.cljs","^O",15,"^10",["^W",[["^19"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",25,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^18","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^J",["^ ","^K","^?","^L",59,"^M",16,"^N",59,"^O",30,"^P",true],"^P",true,"^>","~$clojure.test.check.random/mix-64-const-1","^K","clojure/test/check/random.cljs","^O",30,"^M",1,"^L",59,"^N",59,"^R","^S"],"~$split",["^ ","^U",null,"^J",["^ ","^K","^?","^L",31,"^M",4,"^N",31,"^O",9,"^16","^17","^18","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["^19"]]]]]],"^16","^17","^>","~$clojure.test.check.random/split","^[",false,"^K","clojure/test/check/random.cljs","^O",9,"^10",["^W",[["^19"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",31,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^18","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^9",["^17"]],"^>","~$clojure.test.check.random/JavaUtilSplittableRandom","^K","clojure/test/check/random.cljs","^O",34,"~:type",true,"^M",10,"^L",91,"~:record",false,"^N",91,"~:skip-protocol-flag",null],"~$IRandom",["^ ","^J",["^ ","~:protocol-symbol",true,"^K","^?","^O",21,"^M",14,"^L",19,"~:protocol-info",["^ ","~:methods",["^ ","^15",[["^19"]],"^1S",[["^19"]],"^1W",[["^19"]],"^1L",[["^19","~$n"]]]],"^N",19,"^18",null,"~:jsdoc",["^W",["@interface"]]],"^25",true,"^>","^17","^K","clojure/test/check/random.cljs","^O",21,"^M",1,"^L",19,"^26",["^ ","^27",["^ ","^15",[["^19"]],"^1S",[["^19"]],"^1W",[["^19"]],"^1L",[["^19","~$n"]]]],"~:info",null,"^N",19,"^R","^S","~:impls",["^9",["^20"]],"^18",null,"^28",["^W",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^U",null,"^J",["^ ","^1[",["^9",["^17"]],"^K","^?","^O",34,"^M",10,"~:factory","~:positional","^L",91,"^N",91,"^V",["^W",["^X",["^W",[["~$gamma","~$state"]]]]],"^23",null],"^1[",["^9",["^17"]],"^>","~$clojure.test.check.random/->JavaUtilSplittableRandom","^[",false,"^K","clojure/test/check/random.cljs","^O",34,"^10",["^W",[["^2>","^2?"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^2<","^2=","^L",91,"^N",91,"^13",2,"^14",true,"^V",["^W",["^X",["^W",[["^2>","^2?"]]]]],"^23",null]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~$x","^1<","^Z","^1G","^I","^1D","^1B","^T","^15","^1X","^1;","~:returned","^P","^17","^25","^16","^1=","^19","^1R","^1?","^1[","~:ns","^>","^[","^K","^O","^1F","^1A","~:state","^10","^1C","^1E","^12","~:seed","^Q","^1:","^M","~:author","~$n","^1H","^?","^2=","^1J","^2<","^1T","^27","^1O","^1L","^L","^26","^1V","^2?","^1@","~$s","^1N","^Y","^N","^1Q","^1S","^13","^1U","^1W","^1>","^V","^23","^18","^2@","^28","^1I","^24","~:test","^1M","^2>","^2;","^1K"]],"~:order",["^17","^25","^2F","^>","^K","^O","^M","^L","^26","^N","^V","^18","^28","^2J","^?","^2I","^24","^27","^15","^1S","^1W","^1L","^19","~$n","^1:","^16","^1T","^1X","^1M","^1R","^P","^1Q","~$s","^1D","^1C","~$x","^1V","^1U","^1B","^1A","^1<","^1;","^Q","^I","^1@","^1?","^1K","^1J","^1I","^1H","^2>","^2?","^2@","^1[","^2<","^23","^2;","^2=","^1>","^1=","^2H","^Z","^T","^Y","^2G","^2E","^1O","^1N","^1G","^1F","^1E","^[","^13","^10","^12"]],"^18","Purely functional and splittable pseudo-random number generators."]