["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$postwalk","~$clojure.walk","~$union","~$clojure.set","~$join","~$clojure.string","~$split-lines","^8","~$blank?","^8"],"~:excludes",["~#set",[]],"~:name","~$gadjett.collections","~:imports",null,"~:requires",["^ ","^6","^6","^4","^4","^8","^8","~$zip","~$clojure.zip","^B","^B"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","^5","^6","^7","^8","^9","^8","^:","^8"],"~:defs",["^ ","~$unflatten-keys",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","~:line",485,"~:column",7,"~:end-line",485,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^O",[["~$m"]]]]],"~:doc","\n  Unflattend the keys of a map that has been `flatten-keys`ed.\n\n~~~klipse\n(unflatten-keys {[:a :b] 1, [:c :d] 2, [:c :e] 4, [:c :f :g] 8})\n~~~\n"],"^=","~$gadjett.collections/unflatten-keys","~:variadic",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",21,"~:method-params",["^O",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"^J",485,"^L",485,"~:max-fixed-arity",1,"~:fn-var",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","\n  Unflattend the keys of a map that has been `flatten-keys`ed.\n\n~~~klipse\n(unflatten-keys {[:a :b] 1, [:c :d] 2, [:c :e] 4, [:c :f :g] 8})\n~~~\n"],"~$sequence->map",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",136,"^K",7,"^L",136,"^M",20,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Converts a sequence into a map where the keys are the indexes of the elements in the sequence.\n\n  ~~~klipse\n  (sequence->map [10 20 30])\n  ~~~\n  "],"^=","~$gadjett.collections/sequence->map","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["~$s"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",136,"^L",136,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Converts a sequence into a map where the keys are the indexes of the elements in the sequence.\n\n  ~~~klipse\n  (sequence->map [10 20 30])\n  ~~~\n  "],"~$=without-keys?",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",37,"^K",7,"^L",37,"^M",21,"^N",["^O",["^P",["^O",[["~$obj-a","~$obj-b","~$keys-list"]]]]],"^Q","Compare two maps exclusing some keys\n\n~~~klipse\n  (=without-keys? {:a 1 :b 2 :c 3} {:a 1 :b 5} #{:b :c})\n~~~\n  "],"^=","~$gadjett.collections/=without-keys?","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",21,"^T",["^O",[["^10","^11","^12"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",37,"^L",37,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["^10","^11","^12"]]]]],"^Q","Compare two maps exclusing some keys\n\n~~~klipse\n  (=without-keys? {:a 1 :b 2 :c 3} {:a 1 :b 5} #{:b :c})\n~~~\n  "],"~$dissoc-in",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",340,"^K",7,"^L",340,"^M",16,"^N",["^O",["^P",["^O",[["~$m",["~$k","~$&","~$ks","~:as","~$keys"]]]]]],"^Q","Dissociates an entry from a nested associative structure returning a new nested structure. `keys` is a sequence of keys. Any empty maps that result will not be present in the new structure. See [assoc-in](https://clojuredocs.org/clojure.core/assoc-in)\n\n~~~klipse\n  (dissoc-in {:a 1 :b 2} [:b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2 :B 3} :c 3} [:a :b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2} :c 3} [:a :b])\n~~~\n  "],"^=","~$gadjett.collections/dissoc-in","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",16,"^T",["^O",[["~$m","~$p__28561"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",340,"^L",340,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$m",["~$k","~$&","^15","^16","^17"]]]]]],"^Q","Dissociates an entry from a nested associative structure returning a new nested structure. `keys` is a sequence of keys. Any empty maps that result will not be present in the new structure. See [assoc-in](https://clojuredocs.org/clojure.core/assoc-in)\n\n~~~klipse\n  (dissoc-in {:a 1 :b 2} [:b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2 :B 3} :c 3} [:a :b])\n~~~\n\n~~~klipse\n  (dissoc-in {:a {:b 2} :c 3} [:a :b])\n~~~\n  "],"~$split-by-predicate-positions",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",396,"^K",7,"^L",396,"^M",35,"^N",["^O",["^P",["^O",[["~$coll","~$pred","~$n","~$d"]]]]],"^Q","\n  Optimized version of `split-by-predicate` where we assume that the data is from a signal that we can sample.\n\n  Instead of checking each element, we check 1 over `n` elements.\n\n We return the positions where the data splits.\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.001))]\n    (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 10))\n~~~\n\n  The following assertion holds:\n\n~~~clojure\n  (= (split-by-predicate coll pred n)\n     (map #(apply subsequence data %) (split-by-predicate-positions coll pred n 1)))\n~~~\n\n  Here is an example:\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.01))]\n    (= (split-by-predicate data #(<= -0.01 % 0.01) 2)\n       (map #(apply subsequence data %) (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 1))))\n~~~\n  "],"^=","~$gadjett.collections/split-by-predicate-positions","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",35,"^T",["^O",[["^1;","^1<","~$n","~$d"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",396,"^L",396,"^W",4,"^X",true,"^N",["^O",["^P",["^O",[["^1;","^1<","~$n","~$d"]]]]],"^Q","\n  Optimized version of `split-by-predicate` where we assume that the data is from a signal that we can sample.\n\n  Instead of checking each element, we check 1 over `n` elements.\n\n We return the positions where the data splits.\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.001))]\n    (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 10))\n~~~\n\n  The following assertion holds:\n\n~~~clojure\n  (= (split-by-predicate coll pred n)\n     (map #(apply subsequence data %) (split-by-predicate-positions coll pred n 1)))\n~~~\n\n  Here is an example:\n\n~~~klipse\n  (let [data (map Math/sin (range 0 6.28 0.01))]\n    (= (split-by-predicate data #(<= -0.01 % 0.01) 2)\n       (map #(apply subsequence data %) (split-by-predicate-positions data #(<= -0.01 % 0.01) 2 1))))\n~~~\n  "],"~$mapify",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",317,"^K",7,"^L",317,"^M",13,"^N",["^O",["^P",["^O",[["~$f","~$s"]]]]],"^Q","\n  Takes a seq, and returns a map where the keys are the result of applying f to the elements in the seq.\n  The result of f should be unique for each element in the seq, otherwise you will loose some data.\n  If it is not unique, consider using [group-by](https://clojuredocs.org/clojure.core/group-by).\n\n~~~klipse\n  (mapify inc (range 5) )\n~~~\n  "],"^=","~$gadjett.collections/mapify","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",13,"^T",["^O",[["~$f","~$s"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",317,"^L",317,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$f","~$s"]]]]],"^Q","\n  Takes a seq, and returns a map where the keys are the result of applying f to the elements in the seq.\n  The result of f should be unique for each element in the seq, otherwise you will loose some data.\n  If it is not unique, consider using [group-by](https://clojuredocs.org/clojure.core/group-by).\n\n~~~klipse\n  (mapify inc (range 5) )\n~~~\n  "],"~$submap?",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",429,"^K",7,"^L",429,"^M",14,"^N",["^O",["^P",["^O",[["~$m1","~$m2"]]]]],"^Q","Checks if `m1` is a submap of `m2`.\n  Map `m1` is a submap of `m2` if all key/value pairs in `m1` exist in `m2`.\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2})\n~~~\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2 :c nil})\n~~~\n  "],"^=","~$gadjett.collections/submap?","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",14,"^T",["^O",[["^1A","^1B"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",429,"^L",429,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^1A","^1B"]]]]],"^Q","Checks if `m1` is a submap of `m2`.\n  Map `m1` is a submap of `m2` if all key/value pairs in `m1` exist in `m2`.\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2})\n~~~\n\n~~~klipse\n  (submap? {:a 1} {:a 1 :b 2 :c nil})\n~~~\n  "],"~$positions",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",365,"^K",7,"^L",365,"^M",16,"^N",["^O",["^P",["^O",[["~$coll-of-lengths","~$&",["^ ","~:keys",["~$max-val","~$first-val"],"~:or",["^ ","^1G","~$infinity","^1H",0]]]]]]],"^Q","Receives a collection of lengths and returns a list of start and end positions. Options:\n  * `max-val`: (default `infinity`) - max value for `end`\n  * `first-val`: (default 0) - first value of `start`\n\n~~~klipse\n  (positions '(10 10 20) :first-val 100 :max-val 137)\n~~~\n\n  ","~:top-fn",["^ ","^S",true,"^W",1,"^T",[["^O",["^1E",["^ ","^1F",["^1G","^1H"],"^1I",["^ ","^1G","^1J","^1H",0]]]]],"^N",["^O",[["^1E","~$&",["^ ","^1F",["^1G","^1H"],"^1I",["^ ","^1G","^1J","^1H",0]]]]],"^V",["^O",[null]]]],"^=","~$gadjett.collections/positions","^S",true,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",16,"^1K",["^ ","^S",true,"^W",1,"^T",[["^O",["^1E",["^ ","^1F",["^1G","^1H"],"^1I",["^ ","^1G","^1J","^1H",0]]]]],"^N",["^O",[["^1E","~$&",["^ ","^1F",["^1G","^1H"],"^1I",["^ ","^1G","^1J","^1H",0]]]]],"^V",["^O",[null]]],"^T",[["^O",["^1E",["^ ","^1F",["^1G","^1H"],"^1I",["^ ","^1G","^1J","^1H",0]]]]],"^U",null,"^V",["^O",[null]],"^K",1,"^J",365,"^L",365,"^W",1,"^X",true,"^N",["^O",[["^1E","~$&",["^ ","^1F",["^1G","^1H"],"^1I",["^ ","^1G","^1J","^1H",0]]]]],"^Q","Receives a collection of lengths and returns a list of start and end positions. Options:\n  * `max-val`: (default `infinity`) - max value for `end`\n  * `first-val`: (default 0) - first value of `start`\n\n~~~klipse\n  (positions '(10 10 20) :first-val 100 :max-val 137)\n~~~\n\n  "],"~$filter-map",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",267,"^K",7,"^L",267,"^M",17,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Run a function on the values of a map and keep only the (key, value) pairs for which the function returns true\n  \n~~~klipse\n  (filter-map even? {:a 1 :b 2 :c 3})\n~~~\n  "],"^=","~$gadjett.collections/filter-map","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",17,"^T",["^O",[["~$f","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",267,"^L",267,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Run a function on the values of a map and keep only the (key, value) pairs for which the function returns true\n  \n~~~klipse\n  (filter-map even? {:a 1 :b 2 :c 3})\n~~~\n  "],"~$vec->map",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",47,"^K",7,"^L",47,"^M",15,"^N",["^O",["^P",["^O",[["~$vec"]]]]],"^Q","Converts a 2d vec to a hash-map.\n\n~~~klipse\n   (vec->map [[:a 1] [:b 2]])\n~~~\n   "],"^=","~$gadjett.collections/vec->map","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",15,"^T",["^O",[["^1P"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",47,"^L",47,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["^1P"]]]]],"^Q","Converts a 2d vec to a hash-map.\n\n~~~klipse\n   (vec->map [[:a 1] [:b 2]])\n~~~\n   "],"~$assoc-cyclic",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",205,"^K",7,"^L",205,"^M",19,"^N",["^O",["^P",["^O",[["^1;","~$k","~$v"],["^1;","~$k","~$v","~$n"]]]]],"^Q","Assoc a key-value pair to a map popping out an element of the map.\n  If the key already exists, no element is popped out.\n  If `n` is supplied, no elmement is popped out if the map has less than `n` entries.\n\n~~~klipse\n  (-> {:a 1 :b 2 :c 3}\n      (assoc-cyclic :d 4)\n      (assoc-cyclic :e 5)\n      (assoc-cyclic :f 6)\n      (assoc-cyclic :g 7))\n~~~\n  ","^1K",["^ ","^S",false,"^W",4,"^T",["^O",[["^1;","~$k","~$v"],["^1;","~$k","~$v","~$n"]]],"^N",["^O",[["^1;","~$k","~$v"],["^1;","~$k","~$v","~$n"]]],"^V",["^O",[null,null]]]],"^=","~$gadjett.collections/assoc-cyclic","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",19,"^1K",["^ ","^S",false,"^W",4,"^T",["^O",[["^1;","~$k","~$v"],["^1;","~$k","~$v","~$n"]]],"^N",["^O",[["^1;","~$k","~$v"],["^1;","~$k","~$v","~$n"]]],"^V",["^O",[null,null]]],"^T",["^O",[["^1;","~$k","~$v"],["^1;","~$k","~$v","~$n"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",205,"^L",205,"^W",4,"^X",true,"^N",["^O",[["^1;","~$k","~$v"],["^1;","~$k","~$v","~$n"]]],"^Q","Assoc a key-value pair to a map popping out an element of the map.\n  If the key already exists, no element is popped out.\n  If `n` is supplied, no elmement is popped out if the map has less than `n` entries.\n\n~~~klipse\n  (-> {:a 1 :b 2 :c 3}\n      (assoc-cyclic :d 4)\n      (assoc-cyclic :e 5)\n      (assoc-cyclic :f 6)\n      (assoc-cyclic :g 7))\n~~~\n  "],"^1J",["^ ","^=","~$gadjett.collections/infinity","^I","resources/public/fig2/js/gadjett/collections.cljc","^J",7,"^K",1,"^L",7,"^M",14,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",7,"^K",6,"^L",7,"^M",14],"~:tag","~$js/Number"],"~$subsequence",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",444,"^K",7,"^L",444,"^M",18,"^N",["^O",["^P",["^O",[["^1;","~$start","~$end"]]]]],"^Q","\n  Returns a lazy subsequence of `coll`, starting at `start, ending at `end` (not included).\n\n~~~klipse\n  (subsequence (range) 10 20)\n~~~\n  "],"^=","~$gadjett.collections/subsequence","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",18,"^T",["^O",[["^1;","^1X","^1Y"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",444,"^L",444,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["^1;","^1X","^1Y"]]]]],"^Q","\n  Returns a lazy subsequence of `coll`, starting at `start, ending at `end` (not included).\n\n~~~klipse\n  (subsequence (range) 10 20)\n~~~\n  "],"~$edn-zip",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",625,"^K",7,"^L",625,"^M",14,"^N",["^O",["^P",["^O",[["~$root"]]]]],"^Q","A zipper for `edn`.\n\n~~~klipse\n  (edn-zip {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"^=","~$gadjett.collections/edn-zip","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",14,"^T",["^O",[["^20"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",625,"^L",625,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["^20"]]]]],"^Q","A zipper for `edn`.\n\n~~~klipse\n  (edn-zip {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"~$fix-blank-lines",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",691,"^K",7,"^L",691,"^M",22,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Removes blank lines from the begining and from the end (not from the middle)\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (fix-blank-lines lines))\n~~~\n  "],"^=","~$gadjett.collections/fix-blank-lines","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",22,"^T",["^O",[["~$s"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",691,"^L",691,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Removes blank lines from the begining and from the end (not from the middle)\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (fix-blank-lines lines))\n~~~\n  "],"~$map-to-object",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",307,"^K",7,"^L",307,"^M",20,"^N",["^O",["^P",["^O",[["~$f","~$lst"]]]]],"^Q","Returns a map whose keys are the elements of `lst` and values are mapped by `f`.\n\n~~~klipse\n  (map-to-object inc (range 5))\n~~~\n  "],"^=","~$gadjett.collections/map-to-object","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["~$f","^25"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",307,"^L",307,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$f","^25"]]]]],"^Q","Returns a map whose keys are the elements of `lst` and values are mapped by `f`.\n\n~~~klipse\n  (map-to-object inc (range 5))\n~~~\n  "],"~$deep-merge",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",524,"^K",7,"^L",524,"^M",17,"^N",["^O",["^P",["^O",[["~$&","~$maps"]]]]],"^Q"," Deep merges maps.\n\n~~~klipse\n(deep-merge {} {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}} {:a {:b 1}, :c {:e 4, :d 2000, :f {:g 9000}}})\n~~~\n","^1K",["^ ","^S",true,"^W",0,"^T",[["^O",["^28"]]],"^N",["^O",[["~$&","^28"]]],"^V",["^O",[null]]]],"^=","~$gadjett.collections/deep-merge","^S",true,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",17,"^1K",["^ ","^S",true,"^W",0,"^T",[["^O",["^28"]]],"^N",["^O",[["~$&","^28"]]],"^V",["^O",[null]]],"^T",[["^O",["^28"]]],"^U",null,"^V",["^O",[null]],"^K",1,"^J",524,"^L",524,"^W",0,"^X",true,"^N",["^O",[["~$&","^28"]]],"^Q"," Deep merges maps.\n\n~~~klipse\n(deep-merge {} {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}} {:a {:b 1}, :c {:e 4, :d 2000, :f {:g 9000}}})\n~~~\n"],"~$mean",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",124,"^K",7,"^L",124,"^M",11,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^Q","Calculates the mean (a.k.a average) of a sequence of numbers.\n\n~~~klipse\n  (mean [1 2 10 -1 12.3])\n~~~\n  "],"^=","~$gadjett.collections/mean","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",11,"^T",["^O",[["~$x"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",124,"^L",124,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^Q","Calculates the mean (a.k.a average) of a sequence of numbers.\n\n~~~klipse\n  (mean [1 2 10 -1 12.3])\n~~~\n  "],"~$loc-my-replace",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",650,"^K",8,"^L",650,"^M",22,"~:private",true,"^N",["^O",["^P",["^O",[["~$smap","~$loc"]]]]]],"^2=",true,"^=","~$gadjett.collections/loc-my-replace","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",22,"^T",["^O",[["^2>","^2?"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",650,"^L",650,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^2>","^2?"]]]]]],"~$map-object-kv",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",100,"^K",7,"^L",100,"^M",20,"^N",["^O",["^P",["^O",[["~$fk","~$fv","~$m"]]]]],"^Q","Returns a map with the keys mapped by `fk` and the values mapped by `fv`.\n\n~~~klipse\n    (map-object-kv name inc {:a 1 :b 2 :c 3})\n~~~\n"],"^=","~$gadjett.collections/map-object-kv","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["^2B","^2C","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",100,"^L",100,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["^2B","^2C","~$m"]]]]],"^Q","Returns a map with the keys mapped by `fk` and the values mapped by `fv`.\n\n~~~klipse\n    (map-object-kv name inc {:a 1 :b 2 :c 3})\n~~~\n"],"~$compactize-map-recursive",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",251,"^K",7,"^L",251,"^M",31,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Remove from a map the entries whose values are `nil`.\n  If all the values of a nested map are `nil` the entrie is removed.\n~~~klipse\n\n(compactize-map-recursive {:x 1 :z {:a nil} :a {:b nil :c 2 :d {:e nil :f 2}}})\n~~~\n  "],"^=","~$gadjett.collections/compactize-map-recursive","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",31,"^T",["^O",[["~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",251,"^L",251,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Remove from a map the entries whose values are `nil`.\n  If all the values of a nested map are `nil` the entrie is removed.\n~~~klipse\n\n(compactize-map-recursive {:x 1 :z {:a nil} :a {:b nil :c 2 :d {:e nil :f 2}}})\n~~~\n  "],"~$flatten-keys",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",474,"^K",7,"^L",474,"^M",19,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","\nFlatten the keys of a nested map.\nThanks to [Jay Fields](http://blog.jayfields.com/2010/09/clojure-flatten-keys.html)\n\n~~~klipse\n(flatten-keys {:a {:b 1} :c {:d 2 :e 4 :f {:g 8}}})\n~~~\n"],"^=","~$gadjett.collections/flatten-keys","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",19,"^T",["^O",[["~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",474,"^L",474,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","\nFlatten the keys of a nested map.\nThanks to [Jay Fields](http://blog.jayfields.com/2010/09/clojure-flatten-keys.html)\n\n~~~klipse\n(flatten-keys {:a {:b 1} :c {:d 2 :e 4 :f {:g 8}}})\n~~~\n"],"~$scale",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",21,"^K",8,"^L",21,"^M",13,"^2=",true,"^N",["^O",["^P",["^O",[["~$x","~$y"]]]]]],"^2=",true,"^=","~$gadjett.collections/scale","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",13,"^T",["^O",[["~$x","~$y"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",21,"^L",21,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$x","~$y"]]]]]],"~$flatten-keys*",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",467,"^K",8,"^L",467,"^M",21,"^2=",true,"^N",["^O",["^P",["^O",[["~$a","^15","~$m"]]]]]],"^2=",true,"^=","~$gadjett.collections/flatten-keys*","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",21,"^T",["^O",[["~$a","^15","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",467,"^L",467,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["~$a","^15","~$m"]]]]]],"~$almost=",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",26,"^K",7,"^L",26,"^M",14,"^N",["^O",["^P",["^O",[["~$x","~$y"],["~$x","~$y","~$epsilon"]]]]],"^1K",["^ ","^S",false,"^W",3,"^T",["^O",[["~$x","~$y"],["~$x","~$y","^2N"]]],"^N",["^O",[["~$x","~$y"],["~$x","~$y","^2N"]]],"^V",["^O",[null,null]]]],"^=","~$gadjett.collections/almost=","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",14,"^1K",["^ ","^S",false,"^W",3,"^T",["^O",[["~$x","~$y"],["~$x","~$y","^2N"]]],"^N",["^O",[["~$x","~$y"],["~$x","~$y","^2N"]]],"^V",["^O",[null,null]]],"^T",["^O",[["~$x","~$y"],["~$x","~$y","^2N"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",26,"^L",26,"^W",3,"^X",true,"^N",["^O",[["~$x","~$y"],["~$x","~$y","^2N"]]]],"~$compactize-map",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",239,"^K",7,"^L",239,"^M",21,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Removes entries with `nil` values.\n\n~~~klipse\n  (compactize-map {:a 1 :b nil :c 3})\n~~~\n  "],"^=","~$gadjett.collections/compactize-map","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",21,"^T",["^O",[["~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",239,"^L",239,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Removes entries with `nil` values.\n\n~~~klipse\n  (compactize-map {:a 1 :b nil :c 3})\n~~~\n  "],"~$partition-between",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",595,"^K",7,"^L",595,"^M",24,"^N",["^O",["^P",["^O",[["^1<","^1;"]]]]],"^Q","Splits a collection between two items according to predicate `pred` - which means split the sequence on breaking point.\n\n  See: [here](http://stackoverflow.com/questions/23207490/partition-a-seq-by-a-windowing-predicate-in-clojure)\n\n  For instance, split each time the series stop being ascending:\n\n~~~klipse\n(partition-between > [1 2 4 9 8 7 6 5 1 2 4 5 11])\n~~~\n"],"^=","~$gadjett.collections/partition-between","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",24,"^T",["^O",[["^1<","^1;"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",595,"^L",595,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^1<","^1;"]]]]],"^Q","Splits a collection between two items according to predicate `pred` - which means split the sequence on breaking point.\n\n  See: [here](http://stackoverflow.com/questions/23207490/partition-a-seq-by-a-windowing-predicate-in-clojure)\n\n  For instance, split each time the series stop being ascending:\n\n~~~klipse\n(partition-between > [1 2 4 9 8 7 6 5 1 2 4 5 11])\n~~~\n"],"~$take-from-map",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",496,"^K",7,"^L",496,"^M",20,"^N",["^O",["^P",["^O",[["~$n","~$m"]]]]],"^Q","Creates a map with n leaves which are nested values of m.\n  The following assertion holds:\n\n~~~clojure\n      (>= n (count (flatten-keys (take-from-map n m)))))))\n~~~\n\n~~~klipse\n  (take-from-map 3 {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"^=","~$gadjett.collections/take-from-map","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["~$n","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",496,"^L",496,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$n","~$m"]]]]],"^Q","Creates a map with n leaves which are nested values of m.\n  The following assertion holds:\n\n~~~clojure\n      (>= n (count (flatten-keys (take-from-map n m)))))))\n~~~\n\n~~~klipse\n  (take-from-map 3 {:a {:b 1}, :c {:e 4, :d 2, :f {:g 8}}})\n~~~\n  "],"~$map-nested-vals",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",760,"^K",7,"^L",760,"^M",22,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Map the values of a nested map.\n~~~klipse\n  (map-nested-vals first {:a [1 2 3]\n                          :b {:c [4 5 6]}})\n~~~\n  "],"^=","~$gadjett.collections/map-nested-vals","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",22,"^T",["^O",[["~$f","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",760,"^L",760,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Map the values of a nested map.\n~~~klipse\n  (map-nested-vals first {:a [1 2 3]\n                          :b {:c [4 5 6]}})\n~~~\n  "],"~$compact",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",724,"^K",11,"^L",724,"^M",18,"^N",["^O",["^P",["^O",[["~$x","~$&",["^ ","^1F",["~$max-elements-in-coll","~$max-chars-in-str"],"^1I",["^ ","^2Y",10,"^2Z",20],"^16","~$args"]]]]]],"^Q","\n(clojurescript only)\n\nCompacts an expression by taking only the first `max-elements-in-coll` from collections and first `max-chars-in-str` from strings. Functions are displayed as \"lambda()\".\n\nIt works recursively. It is useful for logging and reporting.\n\nDefault settings:\n\n- `max-elements-in-coll` 10\n- `max-chars-in-str` 20\n\n~~~klipse\n(compact {:infinite-list (range)\n          :long-str \"a very very very very long string - too long to be true\"\n                                                      :long-map (zipmap (range 100) (range 100))\n                                                        :function #(+ 1 2)})\n~~~\n                  ","^1K",["^ ","^S",true,"^W",1,"^T",[["^O",["~$x",["^ ","^1F",["^2Y","^2Z"],"^1I",["^ ","^2Y",10,"^2Z",20],"^16","^2["]]]],"^N",["^O",[["~$x","~$&",["^ ","^1F",["^2Y","^2Z"],"^1I",["^ ","^2Y",10,"^2Z",20],"^16","^2["]]]],"^V",["^O",[null]]]],"^=","~$gadjett.collections/compact","^S",true,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",18,"^1K",["^ ","^S",true,"^W",1,"^T",[["^O",["~$x",["^ ","^1F",["^2Y","^2Z"],"^1I",["^ ","^2Y",10,"^2Z",20],"^16","^2["]]]],"^N",["^O",[["~$x","~$&",["^ ","^1F",["^2Y","^2Z"],"^1I",["^ ","^2Y",10,"^2Z",20],"^16","^2["]]]],"^V",["^O",[null]]],"^T",[["^O",["~$x",["^ ","^1F",["^2Y","^2Z"],"^1I",["^ ","^2Y",10,"^2Z",20],"^16","^2["]]]],"^U",null,"^V",["^O",[null]],"^K",5,"^J",724,"^L",724,"^W",1,"^X",true,"^N",["^O",[["~$x","~$&",["^ ","^1F",["^2Y","^2Z"],"^1I",["^ ","^2Y",10,"^2Z",20],"^16","^2["]]]],"^Q","\n(clojurescript only)\n\nCompacts an expression by taking only the first `max-elements-in-coll` from collections and first `max-chars-in-str` from strings. Functions are displayed as \"lambda()\".\n\nIt works recursively. It is useful for logging and reporting.\n\nDefault settings:\n\n- `max-elements-in-coll` 10\n- `max-chars-in-str` 20\n\n~~~klipse\n(compact {:infinite-list (range)\n          :long-str \"a very very very very long string - too long to be true\"\n                                                      :long-map (zipmap (range 100) (range 100))\n                                                        :function #(+ 1 2)})\n~~~\n                  "],"~$substr",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",790,"^K",7,"^L",790,"^M",13,"^N",["^O",["^P",["^O",[["~$s","^1X"],["~$s","^1X","^1Y"]]]]],"^Q","Like clojure.core/subs but prevents some exceptions when the `start` or `end` are out of bound.\n~~~klipse\n  (subs \"\" -2)\n~~~\n\n  ","^1K",["^ ","^S",false,"^W",3,"^T",["^O",[["~$s","^1X"],["~$s","^1X","^1Y"]]],"^N",["^O",[["~$s","^1X"],["~$s","^1X","^1Y"]]],"^V",["^O",[null,null]]]],"^=","~$gadjett.collections/substr","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",13,"^1K",["^ ","^S",false,"^W",3,"^T",["^O",[["~$s","^1X"],["~$s","^1X","^1Y"]]],"^N",["^O",[["~$s","^1X"],["~$s","^1X","^1Y"]]],"^V",["^O",[null,null]]],"^T",["^O",[["~$s","^1X"],["~$s","^1X","^1Y"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",790,"^L",790,"^W",3,"^X",true,"^N",["^O",[["~$s","^1X"],["~$s","^1X","^1Y"]]],"^Q","Like clojure.core/subs but prevents some exceptions when the `start` or `end` are out of bound.\n~~~klipse\n  (subs \"\" -2)\n~~~\n\n  "],"~$map-with-index",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",330,"^K",7,"^L",330,"^M",21,"^N",["^O",["^P",["^O",[["~$s","~$idx-key","~$val-key"]]]]],"^Q","Maps a sequence to a sequence of maps with index and value\n\n~~~klipse\n      (map-with-index [10 20 30] :idx :val)\n~~~\n  "],"^=","~$gadjett.collections/map-with-index","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",21,"^T",["^O",[["~$s","^34","^35"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",330,"^L",330,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["~$s","^34","^35"]]]]],"^Q","Maps a sequence to a sequence of maps with index and value\n\n~~~klipse\n      (map-with-index [10 20 30] :idx :val)\n~~~\n  "],"~$map-object-with-key",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",90,"^K",7,"^L",90,"^M",26,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` must be a `2-ary` function that receives the key and the value as arguments.\n\n~~~klipse\n  (map-object-with-key list {:a 1 :b 2 :c 3})\n~~~\n  "],"^=","~$gadjett.collections/map-object-with-key","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",26,"^T",["^O",[["~$f","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",90,"^L",90,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` must be a `2-ary` function that receives the key and the value as arguments.\n\n~~~klipse\n  (map-object-with-key list {:a 1 :b 2 :c 3})\n~~~\n  "],"~$deep-merge*",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",515,"^K",8,"^L",515,"^M",19,"^2=",true,"^N",["^O",["^P",["^O",[["~$&","^28"]]]]],"^1K",["^ ","^S",true,"^W",0,"^T",[["^O",["^28"]]],"^N",["^O",[["~$&","^28"]]],"^V",["^O",[null]]]],"^2=",true,"^=","~$gadjett.collections/deep-merge*","^S",true,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",19,"^1K",["^ ","^S",true,"^W",0,"^T",[["^O",["^28"]]],"^N",["^O",[["~$&","^28"]]],"^V",["^O",[null]]],"^T",[["^O",["^28"]]],"^U",null,"^V",["^O",[null]],"^K",1,"^J",515,"^L",515,"^W",0,"^X",true,"^N",["^O",[["~$&","^28"]]]],"~$range-till-end",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",169,"^K",7,"^L",169,"^M",21,"^N",["^O",["^P",["^O",[["~$&","^2["]]]]],"^Q","Like `range` but including the `end`.\n\n~~~klipse\n  (range-till-end 10)\n~~~\n\n~~~klipse\n(range-till-end 10 18)\n~~~\n\n~~~klipse\n(range-till-end 10 100 5)\n~~~\n\n  ","^1K",["^ ","^S",true,"^W",0,"^T",[["^O",["^2["]]],"^N",["^O",[["~$&","^2["]]],"^V",["^O",[null]]]],"^=","~$gadjett.collections/range-till-end","^S",true,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",21,"^1K",["^ ","^S",true,"^W",0,"^T",[["^O",["^2["]]],"^N",["^O",[["~$&","^2["]]],"^V",["^O",[null]]],"^T",[["^O",["^2["]]],"^U",null,"^V",["^O",[null]],"^K",1,"^J",169,"^L",169,"^W",0,"^X",true,"^N",["^O",[["~$&","^2["]]],"^Q","Like `range` but including the `end`.\n\n~~~klipse\n  (range-till-end 10)\n~~~\n\n~~~klipse\n(range-till-end 10 18)\n~~~\n\n~~~klipse\n(range-till-end 10 100 5)\n~~~\n\n  "],"~$nearest-of-seq",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",294,"^K",7,"^L",294,"^M",21,"^N",["^O",["^P",["^O",[["~$a","~$b"]]]]],"^Q","Maps each element of `b` to its nearest element in `a`.\n  If `a` is empty, returns `b`.\n\n~~~klipse\n  (nearest-of-seq (range 5) [1.2 3.4 4])\n~~~\n  "],"^=","~$gadjett.collections/nearest-of-seq","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",21,"^T",["^O",[["~$a","~$b"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",294,"^L",294,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$a","~$b"]]]]],"^Q","Maps each element of `b` to its nearest element in `a`.\n  If `a` is empty, returns `b`.\n\n~~~klipse\n  (nearest-of-seq (range 5) [1.2 3.4 4])\n~~~\n  "],"~$range-with-end",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",164,"^K",8,"^L",164,"^M",22,"^2=",true,"^N",["^O",["^P",["^O",[["^1Y"],["^1X","^1Y"],["^1X","^1Y","~$steps"]]]]],"^1K",["^ ","^S",false,"^W",3,"^T",["^O",[["^1Y"],["^1X","^1Y"],["^1X","^1Y","^3@"]]],"^N",["^O",[["^1Y"],["^1X","^1Y"],["^1X","^1Y","^3@"]]],"^V",["^O",[null,null,null]]]],"^2=",true,"^=","~$gadjett.collections/range-with-end","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",22,"^1K",["^ ","^S",false,"^W",3,"^T",["^O",[["^1Y"],["^1X","^1Y"],["^1X","^1Y","^3@"]]],"^N",["^O",[["^1Y"],["^1X","^1Y"],["^1X","^1Y","^3@"]]],"^V",["^O",[null,null,null]]],"^T",["^O",[["^1Y"],["^1X","^1Y"],["^1X","^1Y","^3@"]]],"^U",null,"^V",["^O",[null,null,null]],"^K",1,"^J",164,"^L",164,"^W",3,"^X",true,"^N",["^O",[["^1Y"],["^1X","^1Y"],["^1X","^1Y","^3@"]]]],"~$branches-and-leaves",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",559,"^K",7,"^L",559,"^M",26,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns all branches and leaves off a nested map object.\n\n~~~klipse\n(branches-and-leaves {:a {:b 1 :c {:d 2}} :e 3})\n~~~\n  "],"^=","~$gadjett.collections/branches-and-leaves","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",26,"^T",["^O",[["~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",559,"^L",559,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns all branches and leaves off a nested map object.\n\n~~~klipse\n(branches-and-leaves {:a {:b 1 :c {:d 2}} :e 3})\n~~~\n  "],"~$deep-merge-with",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",545,"^K",7,"^L",545,"^M",22,"^N",["^O",["^P",["^O",[["~$g","~$&","^28"]]]]],"^Q","Like merge-with but deep.\n~~~klipse\n(deep-merge-with concat\n                 {:x {:b [1]\n                      :a [1]}}\n                 {:x {:a [3 4]}})\n~~~\n","^1K",["^ ","^S",true,"^W",1,"^T",[["^O",["~$g","^28"]]],"^N",["^O",[["~$g","~$&","^28"]]],"^V",["^O",[null]]]],"^=","~$gadjett.collections/deep-merge-with","^S",true,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",22,"^1K",["^ ","^S",true,"^W",1,"^T",[["^O",["~$g","^28"]]],"^N",["^O",[["~$g","~$&","^28"]]],"^V",["^O",[null]]],"^T",[["^O",["~$g","^28"]]],"^U",null,"^V",["^O",[null]],"^K",1,"^J",545,"^L",545,"^W",1,"^X",true,"^N",["^O",[["~$g","~$&","^28"]]],"^Q","Like merge-with but deep.\n~~~klipse\n(deep-merge-with concat\n                 {:x {:b [1]\n                      :a [1]}}\n                 {:x {:a [3 4]}})\n~~~\n"],"~$remove-blank-lines",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",709,"^K",7,"^L",709,"^M",25,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Removes blank lines.\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (remove-blank-lines lines))\n~~~\n  "],"^=","~$gadjett.collections/remove-blank-lines","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",25,"^T",["^O",[["~$s"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",709,"^L",709,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Removes blank lines.\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"  \", \"aa\", \"  \", \"bb\", \" \t  \"])]\n  (remove-blank-lines lines))\n~~~\n  "],"~$select-vals",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",809,"^K",7,"^L",809,"^M",18,"^N",["^O",["^P",["^O",[["~$map","~$keyseq"]]]]]],"^=","~$gadjett.collections/select-vals","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",18,"^T",["^O",[["^3I","^3J"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",809,"^L",809,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^3I","^3J"]]]]]],"~$sequence-of-maps->map",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",146,"^K",7,"^L",146,"^M",28,"^N",["^O",["^P",["^O",[["^1;","~$key-fn","~$val-fn"]]]]],"^Q","Converts a sequence of maps into a map where:\n\n  - the keys are extracted from the maps using `key-fn`\n  - the vals extracted from the maps using `val-fn`  \n  \n  ~~~klipse\n  (sequence-of-maps->map [{:key :price :value 19}\n                          {:key :quantity :value 100}]\n                          :key :value)\n  ~~~\n  "],"^=","~$gadjett.collections/sequence-of-maps->map","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",28,"^T",["^O",[["^1;","^3M","^3N"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",146,"^L",146,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["^1;","^3M","^3N"]]]]],"^Q","Converts a sequence of maps into a map where:\n\n  - the keys are extracted from the maps using `key-fn`\n  - the vals extracted from the maps using `val-fn`  \n  \n  ~~~klipse\n  (sequence-of-maps->map [{:key :price :value 19}\n                          {:key :quantity :value 100}]\n                          :key :value)\n  ~~~\n  "],"~$filter-branches",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",573,"^K",7,"^L",573,"^M",22,"^N",["^O",["^P",["^O",[["~$m","~$p"]]]]],"^Q","Filters branches of a (nested) map `m` according to a predicate `m`.\n\n~~~klipse\n(filter-branches {:x {:id 19 :b 1 :c {:id 2}} :e 3} :id)\n~~~\n  "],"^=","~$gadjett.collections/filter-branches","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",22,"^T",["^O",[["~$m","~$p"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",573,"^L",573,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$m","~$p"]]]]],"^Q","Filters branches of a (nested) map `m` according to a predicate `m`.\n\n~~~klipse\n(filter-branches {:x {:id 19 :b 1 :c {:id 2}} :e 3} :id)\n~~~\n  "],"~$select-keys-in-order",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",804,"^K",7,"^L",804,"^M",27,"^N",["^O",["^P",["^O",[["~$m","^3J"]]]]],"^Q","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"^=","~$gadjett.collections/select-keys-in-order","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",27,"^T",["^O",[["~$m","^3J"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",804,"^L",804,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$m","^3J"]]]]],"^Q","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"~$comment?",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",672,"^K",8,"^L",672,"^M",16,"^2=",true,"^N",["^O",["^P",["^O",[["~$s"]]]]]],"^2=",true,"^=","~$gadjett.collections/comment?","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",16,"^T",["^O",[["~$s"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",672,"^L",672,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$s"]]]]]],"~$out-of-bound?",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",585,"^K",7,"^L",585,"^M",20,"^N",["^O",["^P",["^O",[["~$v","~$idx"]]]]],"^Q","Checks if index `idx` is in range of vector `v`. More efficient than `(get v idx)`\n\n~~~klipse\n    (map #(out-of-bound? [1 2 3] %) [-1 0 1 2 3 4])\n~~~\n  "],"^=","~$gadjett.collections/out-of-bound?","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["~$v","^3W"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",585,"^L",585,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$v","^3W"]]]]],"^Q","Checks if index `idx` is in range of vector `v`. More efficient than `(get v idx)`\n\n~~~klipse\n    (map #(out-of-bound? [1 2 3] %) [-1 0 1 2 3 4])\n~~~\n  "],"~$map-2d-vec",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",57,"^K",7,"^L",57,"^M",17,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-2d-vec inc [[:a 1] [:b 2]])\n~~~\n"],"^=","~$gadjett.collections/map-2d-vec","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",17,"^T",["^O",[["~$f","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",57,"^L",57,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-2d-vec inc [[:a 1] [:b 2]])\n~~~\n"],"~$split-by-predicate",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",380,"^K",7,"^L",380,"^M",25,"^N",["^O",["^P",["^O",[["^1;","^1<","~$n"]]]]],"^Q","Splits a collection to items where the separator is a repetition of at least n elements that satisfy `pred`.\n\n  Inspired by: [this question](http://stackoverflow.com/a/23555616/813665).\n\n~~~klipse\n  (split-by-predicate (shuffle (range 30)) even? 2)\n~~~\n  "],"^=","~$gadjett.collections/split-by-predicate","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",25,"^T",["^O",[["^1;","^1<","~$n"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",380,"^L",380,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["^1;","^1<","~$n"]]]]],"^Q","Splits a collection to items where the separator is a repetition of at least n elements that satisfy `pred`.\n\n  Inspired by: [this question](http://stackoverflow.com/a/23555616/813665).\n\n~~~klipse\n  (split-by-predicate (shuffle (range 30)) even? 2)\n~~~\n  "],"~$abs",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",10,"^K",7,"^L",10,"^M",10,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^Q","Absolute value of a number\n\n~~~klipse\n  (map abs (range -5 5))\n~~~\n\n"],"^=","~$gadjett.collections/abs","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",10,"^T",["^O",[["~$x"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",10,"^L",10,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^Q","Absolute value of a number\n\n~~~klipse\n  (map abs (range -5 5))\n~~~\n\n"],"~$deep-merge-with*",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",536,"^K",8,"^L",536,"^M",24,"^2=",true,"^N",["^O",["^P",["^O",[["~$g","~$&","^28"]]]]],"^1K",["^ ","^S",true,"^W",1,"^T",[["^O",["~$g","^28"]]],"^N",["^O",[["~$g","~$&","^28"]]],"^V",["^O",[null]]]],"^2=",true,"^=","~$gadjett.collections/deep-merge-with*","^S",true,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",24,"^1K",["^ ","^S",true,"^W",1,"^T",[["^O",["~$g","^28"]]],"^N",["^O",[["~$g","~$&","^28"]]],"^V",["^O",[null]]],"^T",[["^O",["~$g","^28"]]],"^U",null,"^V",["^O",[null]],"^K",1,"^J",536,"^L",536,"^W",1,"^X",true,"^N",["^O",[["~$g","~$&","^28"]]]],"~$join-them",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",773,"^K",7,"^L",773,"^M",16,"^N",["^O",["^P",["^O",[["~$fns","~$colls"]]]]],"^Q","Join a sequence of collections `colls` according to function equality.\n   `fns` - a sequence of functions\n   `colls` - a sequence of collections\n~~~klipse\n(let [a [{:id 1 :price 19} {:id 2 :price 3}]\n        b [{:guid 1 :quantity 13}]]\n     (join-them [:id :guid] [a b]))\n~~~\n"],"^=","~$gadjett.collections/join-them","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",16,"^T",["^O",[["^46","^47"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",773,"^L",773,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^46","^47"]]]]],"^Q","Join a sequence of collections `colls` according to function equality.\n   `fns` - a sequence of functions\n   `colls` - a sequence of collections\n~~~klipse\n(let [a [{:id 1 :price 19} {:id 2 :price 3}]\n        b [{:guid 1 :quantity 13}]]\n     (join-them [:id :guid] [a b]))\n~~~\n"],"~$append-cyclic",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",189,"^K",7,"^L",189,"^M",20,"^N",["^O",["^P",["^O",[["^25","~$a"]]]]],"^Q","Appends an element to a list popping out the first element.\n\n~~~klipse\n  (-> (repeat 3 nil)\n      (append-cyclic 1)\n      (append-cyclic 2)\n      (append-cyclic 3)\n      (append-cyclic 4))\n~~~\n  "],"^=","~$gadjett.collections/append-cyclic","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["^25","~$a"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",189,"^L",189,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^25","~$a"]]]]],"^Q","Appends an element to a list popping out the first element.\n\n~~~klipse\n  (-> (repeat 3 nil)\n      (append-cyclic 1)\n      (append-cyclic 2)\n      (append-cyclic 3)\n      (append-cyclic 4))\n~~~\n  "],"~$select-vals-in-order",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",812,"^K",7,"^L",812,"^M",27,"^N",["^O",["^P",["^O",[["^3I","^15"]]]]],"^Q","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"^=","~$gadjett.collections/select-vals-in-order","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",27,"^T",["^O",[["^3I","^15"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",812,"^L",812,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^3I","^15"]]]]],"^Q","Thanks [Jay Fields](http://blog.jayfields.com/2011/01/clojure-select-keys-select-values-and.html)"],"~$collify",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",611,"^K",7,"^L",611,"^M",14,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Ensure `s` is a collection: if `s` is a collection returns it; otherwise returns (s)\n\n~~~klipse\n(collify 1)\n~~~\n\n~~~klipse\n(collify [1 2 3])\n~~~\n  "],"^=","~$gadjett.collections/collify","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",14,"^T",["^O",[["~$s"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",611,"^L",611,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Ensure `s` is a collection: if `s` is a collection returns it; otherwise returns (s)\n\n~~~klipse\n(collify 1)\n~~~\n\n~~~klipse\n(collify [1 2 3])\n~~~\n  "],"~$map-2d-vec-kv",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",68,"^K",7,"^L",68,"^M",20,"^N",["^O",["^P",["^O",[["^2B","^2C","~$m"]]]]],"^Q","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`fk` is a `1-ary` function that receives the key.\n`fv` is a `1-ary` function that receives the value.\n\n~~~klipse\n    (map-2d-vec-kv name inc [[:a 1] [:b 2]])\n~~~\n"],"^=","~$gadjett.collections/map-2d-vec-kv","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["^2B","^2C","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",68,"^L",68,"^W",3,"^X",true,"^N",["^O",["^P",["^O",[["^2B","^2C","~$m"]]]]],"^Q","Maps the values of a `2D` vector where each element of the vector is a key-value pair.\n`fk` is a `1-ary` function that receives the key.\n`fv` is a `1-ary` function that receives the value.\n\n~~~klipse\n    (map-2d-vec-kv name inc [[:a 1] [:b 2]])\n~~~\n"],"~$max-and-min",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",227,"^K",7,"^L",227,"^M",18,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^Q","Returns a couple of the `max` and the `min` of a sequence.\n\n~~~klipse\n  (max-and-min (range 5))\n~~~\n  "],"^=","~$gadjett.collections/max-and-min","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",18,"^T",["^O",[["~$x"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",227,"^L",227,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^Q","Returns a couple of the `max` and the `min` of a sequence.\n\n~~~klipse\n  (max-and-min (range 5))\n~~~\n  "],"~$index-of",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",456,"^K",7,"^L",456,"^M",15,"^N",["^O",["^P",["^O",[["~$s","~$element"]]]]],"^Q","Returns the index of an element in a sequence or `-1` if not present.\n\n  ~~~klipse\n  (index-of (range 100) 18)\n  ~~~\n  "],"^=","~$gadjett.collections/index-of","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",15,"^T",["^O",[["~$s","^4D"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",456,"^L",456,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$s","^4D"]]]]],"^Q","Returns the index of an element in a sequence or `-1` if not present.\n\n  ~~~klipse\n  (index-of (range 100) 18)\n  ~~~\n  "],"~$nearest-of-ss",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",282,"^K",7,"^L",282,"^M",20,"^N",["^O",["^P",["^O",[["~$ss","~$x"]]]]],"^Q","Returns the nearest number to `x` of a sorted set\n\n~~~klipse\n  (nearest-of-ss (apply sorted-set (range 5)) 1.2)\n~~~\n  "],"^=","~$gadjett.collections/nearest-of-ss","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",20,"^T",["^O",[["^4G","~$x"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",282,"^L",282,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^4G","~$x"]]]]],"^Q","Returns the nearest number to `x` of a sorted set\n\n~~~klipse\n  (nearest-of-ss (apply sorted-set (range 5)) 1.2)\n~~~\n  "],"~$map-reverse-hierarchy",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",110,"^K",7,"^L",110,"^M",28,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Turns a hash map inside out.\n  See:  [here](http://stackoverflow.com/a/23653784/813665)\n\n~~~klipse\n  (map-reverse-hierarchy {:monday {:banana 2 :apple 3} \n                          :tuesday {:banana 5 :orange 2}})\n~~~\n"],"^=","~$gadjett.collections/map-reverse-hierarchy","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",28,"^T",["^O",[["~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",110,"^L",110,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Turns a hash map inside out.\n  See:  [here](http://stackoverflow.com/a/23653784/813665)\n\n~~~klipse\n  (map-reverse-hierarchy {:monday {:banana 2 :apple 3} \n                          :tuesday {:banana 5 :orange 2}})\n~~~\n"],"~$remove-ending-comments",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",675,"^K",7,"^L",675,"^M",29,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Removes comment lines from the end.\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"aa\", \"  \", \"bb\" \"; this comment should not appear\"])]\n  (remove-ending-comments lines))\n~~~\n  "],"^=","~$gadjett.collections/remove-ending-comments","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",29,"^T",["^O",[["~$s"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",675,"^L",675,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^Q","Removes comment lines from the end.\n\n~~~klipse\n  ; we use (char 10) for end-of-line due to technical issues with string manipulation with `codox`\n  (let [lines (clojure.string/join (char 10) [\"aa\", \"  \", \"bb\" \"; this comment should not appear\"])]\n  (remove-ending-comments lines))\n~~~\n  "],"~$map-object",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",80,"^K",7,"^L",80,"^M",17,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-object inc {:a 1 :b 2 :c 3})\n~~~\n  "],"^=","~$gadjett.collections/map-object","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",17,"^T",["^O",[["~$f","~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",80,"^L",80,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$f","~$m"]]]]],"^Q","Returns a map with the same keys as `m` and with the values transformed by `f`. `f` is a `1-ary` function that receives the key.\n\n~~~klipse\n  (map-object inc {:a 1 :b 2 :c 3})\n~~~\n  "],"~$=set",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",33,"^K",8,"^L",33,"^M",12,"^2=",true,"^N",["^O",["^P",["^O",[["~$a","~$b"]]]]]],"^2=",true,"^=","~$gadjett.collections/=set","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",12,"^T",["^O",[["~$a","~$b"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",33,"^L",33,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$a","~$b"]]]]]],"~$my-replace",["^ ","^G",null,"^H",["^ ","^I","/Users/viebel/prj/klipse/resources/public/fig2/js/gadjett/collections.cljc","^J",657,"^K",7,"^L",657,"^M",17,"^N",["^O",["^P",["^O",[["^2>","~$form"]]]]],"^Q","Recursively transforms `form` by replacing keys in `smap` with their\n  values, spliced. The values in `smap` must be sequences. Like clojure.walk/prewalk-replace but supports list in values.\n\n~~~klipse\n(my-replace '{go (go gadjett)} '(go (<! (timeout 100)) (go (<! timeout 0))))\n~~~\n  "],"^=","~$gadjett.collections/my-replace","^S",false,"^I","resources/public/fig2/js/gadjett/collections.cljc","^M",17,"^T",["^O",[["^2>","^4R"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",657,"^L",657,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^2>","^4R"]]]]],"^Q","Recursively transforms `form` by replacing keys in `smap` with their\n  values, spliced. The values in `smap` must be sequences. Like clojure.walk/prewalk-replace but supports list in values.\n\n~~~klipse\n(my-replace '{go (go gadjett)} '(go (<! (timeout 100)) (go (<! timeout 0))))\n~~~\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["~:max-elements-in-coll","~:else","~:max-chars-in-str","~:first-val","~:branches","~:leaves","~:max-val"]],"~:order",["^52","^4[","^50","^51","^4X","^4Z","^4Y"]],"^Q",null]