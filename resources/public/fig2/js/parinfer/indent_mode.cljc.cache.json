["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$join","~$clojure.string"],"~:excludes",["~#set",[]],"~:name","~$parinfer.indent-mode","~:imports",null,"~:requires",["^ ","^4","^4","~$parinfer.string","^;","~$parinfer.reader","^<"],"~:uses",["^ ","~$whitespace?","^<","~$insert-string","^;","^3","^4","~$in-code?","^<","~$valid-closer?","^<","~$in-comment?","^<","~$remove-str-range","^;","~$closing-delim?","^<","~$in-str?","^<","~$matching-delim","^<","~$push-char","^<","~$get-lines","^;","~$escaping?","^<"],"~:defs",["^ ","~$initial-state",["^ ","^7","~$parinfer.indent-mode/initial-state","~:file","resources/public/fig2/js/parinfer/indent_mode.cljc","~:line",19,"~:column",1,"~:end-line",19,"~:end-column",19,"~:meta",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",19,"^O",6,"^P",19,"^Q",19],"~:doc","An initial state of our running state.","~:tag","~$cljs.core/IMap"],"~$process-text-change",["^ ","~:protocol-inline",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",404,"^O",7,"^P",404,"^Q",26,"~:arglists",["~#list",["~$quote",["^Y",[["~$prev-state","~$change"],["^[",["^ ","~:keys",["~$line-no","~$new-line"],"~:as","^10"],"~$options"]]]]],"^S","Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage.","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",3,"~:method-params",["^Y",[["^[","^10"],["^[",["^ ","^11",["^12","^13"],"^14","^10"],"^15"]]],"^X",["^Y",[["^[","^10"],["^[",["^ ","^11",["^12","^13"],"^14","^10"],"^15"]]],"~:arglists-meta",["^Y",[null,null]]]],"^7","~$parinfer.indent-mode/process-text-change","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",26,"^16",["^ ","^17",false,"^18",3,"^19",["^Y",[["^[","^10"],["^[",["^ ","^11",["^12","^13"],"^14","^10"],"^15"]]],"^X",["^Y",[["^[","^10"],["^[",["^ ","^11",["^12","^13"],"^14","^10"],"^15"]]],"^1:",["^Y",[null,null]]],"^19",["^Y",[["^[","^10"],["^[",["^ ","^11",["^12","^13"],"^14","^10"],"^15"]]],"~:protocol-impl",null,"^1:",["^Y",[null,null]],"^O",1,"^N",404,"^P",404,"^18",3,"~:fn-var",true,"^X",["^Y",[["^[","^10"],["^[",["^ ","^11",["^12","^13"],"^14","^10"],"^15"]]],"^S","Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage."],"~$block-delim-trail",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",122,"^O",7,"^P",122,"^Q",24,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["~$delim-trail","^12","~$cursor-line","~$cursor-x","~$cursor-in-comment?"],"^14","~$state"]]]]]],"^S","The presence of the cursor can block the removal of some part of the delim trail."],"^7","~$parinfer.indent-mode/block-delim-trail","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",24,"^19",["^Y",[["~$p__22802"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",122,"^P",122,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1?","^12","^1@","^1A","^1B"],"^14","^1C"]]]]]],"^S","The presence of the cursor can block the removal of some part of the delim trail."],"~$process-text",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",327,"^O",7,"^P",327,"^Q",19,"^X",["^Y",["^Z",["^Y",[["~$text"],["^1G","^15"]]]]],"^S","Fully processes the given text.  Returns new state.\n  See `format-text` for usage.","^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^1G"],["^1G","^15"]]],"^X",["^Y",[["^1G"],["^1G","^15"]]],"^1:",["^Y",[null,null]]]],"^7","~$parinfer.indent-mode/process-text","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",19,"^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^1G"],["^1G","^15"]]],"^X",["^Y",[["^1G"],["^1G","^15"]]],"^1:",["^Y",[null,null]]],"^19",["^Y",[["^1G"],["^1G","^15"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",327,"^P",327,"^18",2,"^1=",true,"^X",["^Y",[["^1G"],["^1G","^15"]]],"^S","Fully processes the given text.  Returns new state.\n  See `format-text` for usage."],"~$format-text-change",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",451,"^O",7,"^P",451,"^Q",25,"^X",["^Y",["^Z",["^Y",[["^1G","^[","^10"],["^1G","^[","^10","^15"]]]]],"^S","Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ","^16",["^ ","^17",false,"^18",4,"^19",["^Y",[["^1G","^[","^10"],["^1G","^[","^10","^15"]]],"^X",["^Y",[["^1G","^[","^10"],["^1G","^[","^10","^15"]]],"^1:",["^Y",[null,null]]]],"^7","~$parinfer.indent-mode/format-text-change","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",25,"^16",["^ ","^17",false,"^18",4,"^19",["^Y",[["^1G","^[","^10"],["^1G","^[","^10","^15"]]],"^X",["^Y",[["^1G","^[","^10"],["^1G","^[","^10","^15"]]],"^1:",["^Y",[null,null]]],"^19",["^Y",[["^1G","^[","^10"],["^1G","^[","^10","^15"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",451,"^P",451,"^18",4,"^1=",true,"^X",["^Y",[["^1G","^[","^10"],["^1G","^[","^10","^15"]]],"^S","Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "],"~$process-indent",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",228,"^O",7,"^P",228,"^Q",21,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["~$stack","~$track-indent?","~$lines","^12","~$x-pos","~$ch"],"^14","^1C"]]]]]],"^S","Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "],"^7","~$parinfer.indent-mode/process-indent","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",21,"^19",["^Y",[["~$p__22827"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",228,"^P",228,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1L","^1M","^1N","^12","^1O","^1P"],"^14","^1C"]]]]]],"^S","Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "],"~$update-line",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",259,"^O",7,"^P",259,"^Q",18,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1P","^12"],"^14","^1C"]]]]]],"^S","Update the state by adding processed character to the line."],"^7","~$parinfer.indent-mode/update-line","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",18,"^19",["^Y",[["~$p__22830"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",259,"^P",259,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1P","^12"],"^14","^1C"]]]]]],"^S","Update the state by adding processed character to the line."],"~$initial-cached-state",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",392,"^O",7,"^P",392,"^Q",27,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1N","~$postline-states","~$postindent-states"],"^14","^["],"^15","~$i"]]]]],"^S","build an initial state based on our starting line and previous cache."],"^7","~$parinfer.indent-mode/initial-cached-state","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",27,"^19",["^Y",[["~$p__22865","^15","~$i"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",392,"^P",392,"^18",3,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1N","^1W","^1X"],"^14","^["],"^15","~$i"]]]]],"^S","build an initial state based on our starting line and previous cache."],"~$close-delims",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",33,"^O",7,"^P",33,"^Q",19,"^X",["^Y",["^Z",["^Y",[["^1C"],["^1C","~$indent-x"]]]]],"^S","Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  ","^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^1C"],["^1C","^20"]]],"^X",["^Y",[["^1C"],["^1C","^20"]]],"^1:",["^Y",[null,null]]]],"^7","~$parinfer.indent-mode/close-delims","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",19,"^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^1C"],["^1C","^20"]]],"^X",["^Y",[["^1C"],["^1C","^20"]]],"^1:",["^Y",[null,null]]],"^19",["^Y",[["^1C"],["^1C","^20"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",33,"^P",33,"^18",2,"^1=",true,"^X",["^Y",[["^1C"],["^1C","^20"]]],"^S","Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  "],"~$get-cached-state",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",218,"^O",7,"^P",218,"^Q",23,"^X",["^Y",["^Z",["^Y",[["^1C"]]]]]],"^7","~$parinfer.indent-mode/get-cached-state","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",23,"^19",["^Y",[["^1C"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",218,"^P",218,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[["^1C"]]]]]],"~$update-insertion-pt",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",178,"^O",7,"^P",178,"^Q",26,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1M","^1@","^1N","^12","^1L","^1O","^1P"],"^14","^1C"]]]]]],"^S","Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "],"^7","~$parinfer.indent-mode/update-insertion-pt","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",26,"^19",["^Y",[["~$p__22823"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",178,"^P",178,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1M","^1@","^1N","^12","^1L","^1O","^1P"],"^14","^1C"]]]]]],"^S","Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "],"~$remove-delim-trail",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",136,"^O",7,"^P",136,"^Q",25,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1?","~$insert","^12","^1N","~$backup","^1L"],"^14","^1C"]]]]]],"^S","Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "],"^7","~$parinfer.indent-mode/remove-delim-trail","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",25,"^19",["^Y",[["~$p__22812"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",136,"^P",136,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1?","^28","^12","^1N","^29","^1L"],"^14","^1C"]]]]]],"^S","Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "],"~$fill-rest-with-cache",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",357,"^O",7,"^P",357,"^Q",27,"^X",["^Y",["^Z",["^Y",[["^[","^1C","~$last-i"]]]]],"^S","fill the rest of the lines with info from cache."],"^7","~$parinfer.indent-mode/fill-rest-with-cache","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",27,"^19",["^Y",[["^[","^1C","^2="]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",357,"^P",357,"^18",3,"^1=",true,"^X",["^Y",["^Z",["^Y",[["^[","^1C","^2="]]]]],"^S","fill the rest of the lines with info from cache."],"~$process-char*",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",273,"^O",7,"^P",273,"^Q",20,"^X",["^Y",["^Z",["^Y",[["^1C"]]]]]],"^7","~$parinfer.indent-mode/process-char*","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",20,"^19",["^Y",[["^1C"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",273,"^P",273,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[["^1C"]]]]]],"~$update-delim-trail",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",66,"^O",7,"^P",66,"^Q",25,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1L","^1?","^29","^1O","^1P","^1@","^12","^1A","^1B"],"^14","^1C"]]]]]],"^S","Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "],"^7","~$parinfer.indent-mode/update-delim-trail","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",25,"^19",["^Y",[["~$p__22798"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",66,"^P",66,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1L","^1?","^29","^1O","^1P","^1@","^12","^1A","^1B"],"^14","^1C"]]]]]],"^S","Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "],"~$process-unchanged-lines",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",383,"^O",7,"^P",383,"^Q",30,"^X",["^Y",["^Z",["^Y",[["^[","^1C","~$start-i"]]]]],"^S","process the lines after those that have changed."],"^7","~$parinfer.indent-mode/process-unchanged-lines","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",30,"^19",["^Y",[["^[","^1C","^2E"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",383,"^P",383,"^18",3,"^1=",true,"^X",["^Y",["^Z",["^Y",[["^[","^1C","^2E"]]]]],"^S","process the lines after those that have changed."],"~$commit-cached-state",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",222,"^O",7,"^P",222,"^Q",26,"^X",["^Y",["^Z",["^Y",[["^1C","~$key-"]]]]],"^S","Cache a subset of the state after some event.\n  This is used by process-text-change."],"^7","~$parinfer.indent-mode/commit-cached-state","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",26,"^19",["^Y",[["^1C","^2H"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",222,"^P",222,"^18",2,"^1=",true,"^X",["^Y",["^Z",["^Y",[["^1C","^2H"]]]]],"^S","Cache a subset of the state after some event.\n  This is used by process-text-change."],"~$save-preinsert-line",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",264,"^O",7,"^P",264,"^Q",26,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^12","^28","^1N"],"^14","^1C"]]]]]],"^S","Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."],"^7","~$parinfer.indent-mode/save-preinsert-line","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",26,"^19",["^Y",[["~$p__22833"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",264,"^P",264,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^12","^28","^1N"],"^14","^1C"]]]]]],"^S","Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."],"~$process-line",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",291,"^O",7,"^P",291,"^Q",19,"^X",["^Y",["^Z",["^Y",[["~$line"],[["^ ","^11",["^1L","^1N","^12","^1@"],"^14","^1C"],"^2N"]]]]],"^S","Update the state by processing the given line of text.","^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^2N"],[["^ ","^11",["^1L","^1N","^12","^1@"],"^14","^1C"],"^2N"]]],"^X",["^Y",[["^2N"],[["^ ","^11",["^1L","^1N","^12","^1@"],"^14","^1C"],"^2N"]]],"^1:",["^Y",[null,null]]]],"^7","~$parinfer.indent-mode/process-line","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",19,"^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^2N"],[["^ ","^11",["^1L","^1N","^12","^1@"],"^14","^1C"],"^2N"]]],"^X",["^Y",[["^2N"],[["^ ","^11",["^1L","^1N","^12","^1@"],"^14","^1C"],"^2N"]]],"^1:",["^Y",[null,null]]],"^19",["^Y",[["^2N"],[["^ ","^11",["^1L","^1N","^12","^1@"],"^14","^1C"],"^2N"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",291,"^P",291,"^18",2,"^1=",true,"^X",["^Y",[["^2N"],[["^ ","^11",["^1L","^1N","^12","^1@"],"^14","^1C"],"^2N"]]],"^S","Update the state by processing the given line of text."],"~$finalize-state",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",320,"^O",7,"^P",320,"^Q",21,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1L"],"^14","^1C"]]]]]]],"^7","~$parinfer.indent-mode/finalize-state","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",21,"^19",["^Y",[["~$p__22849"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",320,"^P",320,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1L"],"^14","^1C"]]]]]]],"~$restore-insert-line",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",348,"^O",7,"^P",348,"^Q",26,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^28","^12"],"^14","^1C"]]]]]],"^S","restore the text of a line before trailing delimiters were inserted"],"^7","~$parinfer.indent-mode/restore-insert-line","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",26,"^19",["^Y",[["~$p__22856"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",348,"^P",348,"^18",1,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^28","^12"],"^14","^1C"]]]]]],"^S","restore the text of a line before trailing delimiters were inserted"],"~$process-char",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",282,"^O",7,"^P",282,"^Q",19,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1N","^12"],"^14","^1C"],"^1P"]]]]],"^S","Update the state by processing the given character and its position."],"^7","~$parinfer.indent-mode/process-char","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",19,"^19",["^Y",[["~$p__22837","^1P"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",282,"^P",282,"^18",2,"^1=",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^11",["^1N","^12"],"^14","^1C"],"^1P"]]]]],"^S","Update the state by processing the given character and its position."],"~$safe-subvec",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",342,"^O",7,"^P",342,"^Q",18,"^X",["^Y",["^Z",["^Y",[["~$v","~$i"]]]]]],"^7","~$parinfer.indent-mode/safe-subvec","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",18,"^19",["^Y",[["~$v","~$i"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",342,"^P",342,"^18",2,"^1=",true,"^X",["^Y",["^Z",["^Y",[["~$v","~$i"]]]]]],"~$process-unchanged-line*",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",371,"^O",7,"^P",371,"^Q",30,"^X",["^Y",["^Z",["^Y",[["^[","^1C",["~$old-i","^2N","~$cache"]]]]]],"^S","process a line that comes after those that have changed.\n  'reduced' will halt further processing."],"^7","~$parinfer.indent-mode/process-unchanged-line*","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",30,"^19",["^Y",[["^[","^1C","~$p__22861"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",371,"^P",371,"^18",3,"^1=",true,"^X",["^Y",["^Z",["^Y",[["^[","^1C",["^30","^2N","^31"]]]]]],"^S","process a line that comes after those that have changed.\n  'reduced' will halt further processing."],"~$format-text",["^ ","^W",null,"^R",["^ ","^M","/Users/viebel/prj/klipse/resources/public/fig2/js/parinfer/indent_mode.cljc","^N",427,"^O",7,"^P",427,"^Q",18,"^X",["^Y",["^Z",["^Y",[["^1G"],["^1G","^15"]]]]],"^S","Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ","^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^1G"],["^1G","^15"]]],"^X",["^Y",[["^1G"],["^1G","^15"]]],"^1:",["^Y",[null,null]]]],"^7","~$parinfer.indent-mode/format-text","^17",false,"^M","resources/public/fig2/js/parinfer/indent_mode.cljc","^Q",18,"^16",["^ ","^17",false,"^18",2,"^19",["^Y",[["^1G"],["^1G","^15"]]],"^X",["^Y",[["^1G"],["^1G","^15"]]],"^1:",["^Y",[null,null]]],"^19",["^Y",[["^1G"],["^1G","^15"]]],"^1<",null,"^1:",["^Y",[null,null]],"^O",1,"^N",427,"^P",427,"^18",2,"^1=",true,"^X",["^Y",[["^1G"],["^1G","^15"]]],"^S","Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:postindent-states","~:cursor-line","~:backup","~:insert","~:valid?","~:else","~:process?","~:x-pos","~:cursor-x","~:start","~:lines","~:state","~:postline-states","~:ch","~:track-indent?","^N","~:line-no","~:stack","~:delim-trail","~:new-line","~:removed-delims","~:end","~:processed-indent?","~:line-dy","~:text","~:cursor-in-comment?"]],"~:order",["^39","^3;","^3<","^3C","^3E","^3G","^3H","^3I","^3J","^3O","^3@","^3B","^3M","^3F","^3:","^3A","^3Q","^3>","^3L","^3?","^3N","^N","^3=","^3K","^3P","^3D"]],"^S","Corrects parens based on indentation.\n  See http://shaunlebron.github.io/parinfer/#indent-mode"]