["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.data","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$vectorize",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","~:line",23,"~:column",8,"~:end-line",23,"~:end-column",17,"~:private",true,"~:arglists",["~#list",["~$quote",["^H",[["~$m"]]]]],"~:doc","Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys"],"^F",true,"^5","~$clojure.data/vectorize","~:variadic",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",17,"~:method-params",["^H",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^C",1,"^B",23,"^D",23,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["~$m"]]]]],"^J","Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys"],"~$diff",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",144,"^C",7,"^D",144,"^E",11,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]],"^J","Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality."],"^5","~$clojure.data/diff","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",11,"^M",["^H",[["~$a","~$b"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",144,"^D",144,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]],"^J","Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality."],"~$atom-diff",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",17,"^C",8,"^D",17,"^E",17,"^F",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]],"^J","Internal helper for diff."],"^F",true,"^5","~$clojure.data/atom-diff","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",17,"^M",["^H",[["~$a","~$b"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",17,"^D",17,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]],"^J","Internal helper for diff."],"~$diff-set",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",69,"^C",8,"^D",69,"^E",16,"^F",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]]],"^F",true,"^5","~$clojure.data/diff-set","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",16,"^M",["^H",[["~$a","~$b"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",69,"^D",69,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]]],"~$equality-partition",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",77,"^C",4,"^D",77,"^E",22,"~:protocol","~$clojure.data/EqualityPartition","^J","Implementation detail. Subject to change.","^G",["^H",["^I",["^H",[["~$x"]]]]]],"^Y","^Z","^5","~$clojure.data/equality-partition","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",22,"^M",["^H",[["~$x"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",75,"^D",77,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$x"]]]]],"^J","Implementation detail. Subject to change."],"~$EqualityPartition",["^ ","^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",75,"^C",14,"^D",75,"^E",31,"^J","Implementation detail. Subject to change.","~:protocol-symbol",true,"~:jsdoc",["^H",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^X",[["~$x"]]]]],"^11",true,"^5","^Z","^A","resources/public/fig2/js/clojure/data.cljs","^E",31,"^C",1,"^B",75,"^13",["^ ","^14",["^ ","^X",[["~$x"]]]],"~:info",null,"^D",75,"~:tag","~$any","~:impls",["^4",[null,"~$boolean","~$number","~$default","~$array","~$string","~$function"]],"^J","Implementation detail. Subject to change.","^12",["^H",["@interface"]]],"~$diff-associative",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",49,"^C",8,"^D",49,"^E",24,"^F",true,"^G",["^H",["^I",["^H",[["~$a","~$b"],["~$a","~$b","~$ks"]]]]],"^J","Diff associative things a and b, comparing only keys in ks (if supplied).","~:top-fn",["^ ","^L",false,"^P",3,"^M",["^H",[["~$a","~$b"],["~$a","~$b","^1@"]]],"^G",["^H",[["~$a","~$b"],["~$a","~$b","^1@"]]],"^O",["^H",[null,null]]]],"^F",true,"^5","~$clojure.data/diff-associative","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",24,"^1A",["^ ","^L",false,"^P",3,"^M",["^H",[["~$a","~$b"],["~$a","~$b","^1@"]]],"^G",["^H",[["~$a","~$b"],["~$a","~$b","^1@"]]],"^O",["^H",[null,null]]],"^M",["^H",[["~$a","~$b"],["~$a","~$b","^1@"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",49,"^D",49,"^P",3,"^Q",true,"^G",["^H",[["~$a","~$b"],["~$a","~$b","^1@"]]],"^J","Diff associative things a and b, comparing only keys in ks (if supplied)."],"~$diff-associative-key",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",33,"^C",8,"^D",33,"^E",28,"^F",true,"^G",["^H",["^I",["^H",[["~$a","~$b","~$k"]]]]],"^J","Diff associative things a and b, comparing only the key k."],"^F",true,"^5","~$clojure.data/diff-associative-key","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",28,"^M",["^H",[["~$a","~$b","~$k"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",33,"^D",33,"^P",3,"^Q",true,"^G",["^H",["^I",["^H",[["~$a","~$b","~$k"]]]]],"^J","Diff associative things a and b, comparing only the key k."],"~$diff-similar",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",81,"^C",4,"^D",81,"^E",16,"^Y","~$clojure.data/Diff","^J","Implementation detail. Subject to change.","^G",["^H",["^I",["^H",[["~$a","~$b"]]]]]],"^Y","^1F","^5","~$clojure.data/diff-similar","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",16,"^M",["^H",[["~$a","~$b"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",79,"^D",81,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]],"^J","Implementation detail. Subject to change."],"~$Diff",["^ ","^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",79,"^C",14,"^D",79,"^E",18,"^J","Implementation detail. Subject to change.","^11",true,"^12",["^H",["@interface"]],"^13",["^ ","^14",["^ ","^1E",[["~$a","~$b"]]]]],"^11",true,"^5","^1F","^A","resources/public/fig2/js/clojure/data.cljs","^E",18,"^C",1,"^B",79,"^13",["^ ","^14",["^ ","^1E",[["~$a","~$b"]]]],"^15",null,"^D",79,"^16","^17","^18",["^4",[null,"^19","^1:","^1;","^1<","^1=","^1>"]],"^J","Implementation detail. Subject to change.","^12",["^H",["@interface"]]],"~$diff-sequential",["^ ","^?",null,"^@",["^ ","^A","/Users/viebel/prj/klipse/resources/public/fig2/js/clojure/data.cljs","^B",62,"^C",8,"^D",62,"^E",23,"^F",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]]],"^F",true,"^5","~$clojure.data/diff-sequential","^L",false,"^A","resources/public/fig2/js/clojure/data.cljs","^E",23,"^M",["^H",[["~$a","~$b"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",62,"^D",62,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["~$a","~$b"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:default","~:sequential","~:set","~:atom","~:map"]],"~:order",["^1R","^1P","^1S","^1Q","^1O"]],"^J","Non-core data functions."]